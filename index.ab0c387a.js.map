{"mappings":"C,A,WECA,IAAM,EAAM,wEAGL,SAAS,EAAY,CAAO,EAC7B,IAAM,EAAS,IAAI,gBAAgB,CAC/B,OAAQ,EACR,QAAA,CACN,GACA,OAAO,MAAO,GAAc,OATf,sCASY,KAAU,OAAP,IACvB,KAAK,SAAC,CADX,EAGQ,GAAI,CAAC,EAAE,GACP,MAAM,IAAI,MAAM,EAAE,QAElB,OAAO,EAAE,IACb,GACH,MAAM,SAAC,CADJ,EACc,OAAA,QAAQ,IAAI,E,EAClC,CElBO,SAAS,EAAkB,CAAQ,CAAE,CAAW,EACnD,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,CCFA,SAAS,EAAkB,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,WAAa,EAAW,YAAc,CAAA,EACjD,EAAW,aAAe,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,SAAW,CAAA,CAAjD,EAEA,OAAO,eAAe,EAAQ,EAAW,IAAK,EAClD,CACJ,EFToF,AAG1E,WAAc,aAEpB,SAAS,IACL,OAAO,KAAK,SAAS,SAAS,IAAI,UAAU,EAAG,GACnD,CAkDA,IAoDA,EAAA,SAAM,EACU,CAAM,EADhB,AAAA,EAAA,IAAA,CAAA,GAEE,IAAI,CAAC,GAAK,AAAC,EAAO,IAAM,AAAc,KAAd,EAAO,GAA2B,EAAO,GAAtB,IAC3C,IAAI,CAAC,MAAQ,AAAiB,KAAA,IAAjB,EAAO,MAAsB,EAAO,KAAO,EAAO,MAC/D,IAAI,CAAC,KAAO,EAAO,MAAQ,GAC3B,IAAI,CAAC,KAAO,EAAO,MAAQ,GAC3B,IAAI,CAAC,SAAW,AAAoB,KAAA,IAApB,EAAO,UAAyB,EAAO,SACvD,IAAI,CAAC,QAAU,AAAmB,KAAA,IAAnB,EAAO,SAAwB,EAAO,QACrD,IAAI,CAAC,SAAW,AAAoB,KAAA,IAApB,EAAO,UAAyB,EAAO,SACvD,IAAI,CAAC,UAAY,AAAqB,KAAA,IAArB,EAAO,WAA0B,EAAO,UACzD,IAAI,CAAC,YAAc,AAAuB,KAAA,IAAvB,EAAO,aAA4B,EAAO,YAC7D,IAAI,CAAC,MAAQ,EAAO,OAAS,GAC7B,IAAI,CAAC,MAAQ,EAAO,OAAS,GAC7B,IAAI,CAAC,KAAO,EAAO,MAAQ,CAAC,C,CA+pDxC,IFlxDA,IAAM,EAAU,SAAS,cAAc,aACjC,EAAS,SAAS,cAAc,kBAKtC,AAHA,SAAmB,CAAI,EACnB,AAAA,EAAY,GAAM,KAAK,SAAA,CAAvB,EAA+B,OAAA,C,EACnC,EACU,WAEV,EAAO,iBAAiB,SAExB,SAAoB,CAAC,MCEW,EDC5B,CCD4B,EDDd,EAAE,OAAO,MCEhB,MAAO,GAA0B,OAnBzB,sCAmBY,eAA+B,OAAlB,EAAQ,YAAc,OAAJ,IACrD,KAAK,SAAC,CADX,EAGQ,GAAI,CAAC,EAAE,GACP,MAAM,IAAI,MAAM,EAAE,QAElB,OAAO,EAAE,IACb,GACH,MAAM,SAAC,CADJ,EACc,OAAA,QAAQ,IAAI,E,IDRL,KAAK,SAAC,CAA/B,EACI,QAAQ,IAAI,GACZ,IAAM,EAAa,EAClB,IAAI,SADL,CAAA,EACQ,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,YAAa,EAAA,EAAA,mBAAoB,EAAA,EAAA,YAC3C,MAAQ,WAA+B,OAArB,EAAK,kBAA2C,OAA3B,EAAmB,UAAgC,OAAxB,EAAK,qBAAwC,OAArB,EAAY,WAAqB,OAAZ,EAAY,YAC/H,GAAG,KAAK,IACZ,EAAQ,mBAAmB,YAAa,EAC1C,EACF,GAWA,AATA,SAAsB,CAAI,EACtB,AAAA,EAAY,GAAM,KAAK,SAAA,CAAvB,EACI,QAAQ,IAAI,GACZ,IAAM,EAAe,EAAK,IAAI,SAA9B,CAAA,EAAiC,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,GACnC,MAAQ,uBAA6B,OAAP,EAAG,MAAS,OAAL,EAAK,iBAC9C,GAAG,KAAK,IACZ,EAAO,mBAAmB,YAAa,EACzC,EACF,EACa,S","sources":["<anon>","src/index.js","src/cat-api.js","node_modules/slim-select/dist/slimselect.umd.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\nvar $ae0c329fb0fb36dc$var$BASE_URL = \"https://api.thecatapi.com/v1/breeds\";\nvar $ae0c329fb0fb36dc$var$API = \"live_XTVqmtwZCRUux0xyyuBoz9aUlTLhAmYM8XZI7lwTTnN9wNP285Bwa4shn7cLcow8\";\nvar $ae0c329fb0fb36dc$var$CAT_SEARCH = \"https://api.thecatapi.com/v1/images\";\nfunction $ae0c329fb0fb36dc$export$913382e0b15b5503(keyword) {\n    var params = new URLSearchParams({\n        apikey: $ae0c329fb0fb36dc$var$API,\n        keyword: keyword\n    });\n    return fetch(\"\".concat($ae0c329fb0fb36dc$var$BASE_URL, \"?\").concat(params)).then(function(r) {\n        if (!r.ok) throw new error(r.status);\n        return r.json;\n    }).catch(function(error1) {\n        return console.log(error1);\n    });\n}\nfunction $ae0c329fb0fb36dc$export$57b7d3a597416aa2(breedId) {\n    return fetch(\"\".concat($ae0c329fb0fb36dc$var$CAT_SEARCH, \"?breed_ids=\").concat(breedId, \"&apikey=\").concat($ae0c329fb0fb36dc$var$API)).then(function(r) {\n        if (!r.ok) throw new error(r.status);\n        return r.json;\n    }).catch(function(error1) {\n        return console.log(error1);\n    });\n}\n\n\nvar $72df7f47b4163a4e$exports = {};\nfunction $e3055412a69a0bec$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $89767be5ae191d10$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $89767be5ae191d10$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $89767be5ae191d10$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $89767be5ae191d10$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n(function(global, factory) {\n    $72df7f47b4163a4e$exports = factory();\n})(undefined, function() {\n    \"use strict\";\n    function generateID() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n    function hasClassInTree(element, className) {\n        function hasClass(e, c) {\n            if (c && e && e.classList && e.classList.contains(c)) return e;\n            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) return e;\n            return null;\n        }\n        function parentByClass(e, c) {\n            if (!e || e === document) return null;\n            else if (hasClass(e, c)) return e;\n            else return parentByClass(e.parentNode, c);\n        }\n        return hasClass(element, className) || parentByClass(element, className);\n    }\n    function debounce(func) {\n        var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, immediate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        var timeout;\n        return function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            var context = self;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    }\n    function isEqual(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    function kebabCase(str) {\n        var result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, function(match) {\n            return \"-\" + match.toLowerCase();\n        });\n        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n    }\n    var Settings = function Settings(settings) {\n        (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Settings);\n        this.id = \"\";\n        this.style = \"\";\n        this.class = [];\n        this.isMultiple = false;\n        this.isOpen = false;\n        this.isFullOpen = false;\n        this.intervalMove = null;\n        if (!settings) settings = {};\n        this.id = \"ss-\" + generateID();\n        this.style = settings.style || \"\";\n        this.class = settings.class || [];\n        this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n        this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n        this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n        this.searchPlaceholder = settings.searchPlaceholder || \"Search\";\n        this.searchText = settings.searchText || \"No Results\";\n        this.searchingText = settings.searchingText || \"Searching...\";\n        this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n        this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n        this.contentLocation = settings.contentLocation || document.body;\n        this.contentPosition = settings.contentPosition || \"absolute\";\n        this.openPosition = settings.openPosition || \"auto\";\n        this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : \"Select Value\";\n        this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n        this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n        this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n        this.minSelected = settings.minSelected || 0;\n        this.maxSelected = settings.maxSelected || 1000;\n        this.timeoutDelay = settings.timeoutDelay || 200;\n        this.maxValuesShown = settings.maxValuesShown || 20;\n        this.maxValuesMessage = settings.maxValuesMessage || \"{number} selected\";\n    };\n    var Optgroup = function Optgroup(optgroup) {\n        (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Optgroup);\n        this.id = !optgroup.id || optgroup.id === \"\" ? generateID() : optgroup.id;\n        this.label = optgroup.label || \"\";\n        this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n        this.closable = optgroup.closable || \"off\";\n        this.options = [];\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        if (optgroup.options) try {\n            for(var _iterator = optgroup.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var o = _step.value;\n                this.options.push(new Option(o));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    };\n    var Option = function Option(option) {\n        (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Option);\n        this.id = !option.id || option.id === \"\" ? generateID() : option.id;\n        this.value = option.value === undefined ? option.text : option.value;\n        this.text = option.text || \"\";\n        this.html = option.html || \"\";\n        this.selected = option.selected !== undefined ? option.selected : false;\n        this.display = option.display !== undefined ? option.display : true;\n        this.disabled = option.disabled !== undefined ? option.disabled : false;\n        this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n        this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n        this.class = option.class || \"\";\n        this.style = option.style || \"\";\n        this.data = option.data || {};\n    };\n    var Store = /*#__PURE__*/ function() {\n        function Store(type, data) {\n            (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Store);\n            this.selectType = \"single\";\n            this.data = [];\n            this.selectType = type;\n            this.setData(data);\n        }\n        (0, $89767be5ae191d10$export$d60067ff2358eee8)(Store, [\n            {\n                key: \"validateDataArray\",\n                value: function validateDataArray(data) {\n                    if (!Array.isArray(data)) return new Error(\"Data must be an array\");\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var dataObj = _step.value;\n                            if (dataObj instanceof Optgroup || \"label\" in dataObj) {\n                                if (!(\"label\" in dataObj)) return new Error(\"Optgroup must have a label\");\n                                if (\"options\" in dataObj && dataObj.options) {\n                                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                    try {\n                                        for(var _iterator1 = dataObj.options[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                            var option = _step1.value;\n                                            return this.validateOption(option);\n                                        }\n                                    } catch (err) {\n                                        _didIteratorError1 = true;\n                                        _iteratorError1 = err;\n                                    } finally{\n                                        try {\n                                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                                _iterator1.return();\n                                            }\n                                        } finally{\n                                            if (_didIteratorError1) {\n                                                throw _iteratorError1;\n                                            }\n                                        }\n                                    }\n                                }\n                            } else if (dataObj instanceof Option || \"text\" in dataObj) return this.validateOption(dataObj);\n                            else return new Error(\"Data object must be a valid optgroup or option\");\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return null;\n                }\n            },\n            {\n                key: \"validateOption\",\n                value: function validateOption(option) {\n                    if (!(\"text\" in option)) return new Error(\"Option must have a text\");\n                    return null;\n                }\n            },\n            {\n                key: \"partialToFullData\",\n                value: function partialToFullData(data) {\n                    var dataFinal = [];\n                    data.forEach(function(dataObj) {\n                        if (dataObj instanceof Optgroup || \"label\" in dataObj) {\n                            var optOptions = [];\n                            if (\"options\" in dataObj && dataObj.options) dataObj.options.forEach(function(option) {\n                                optOptions.push(new Option(option));\n                            });\n                            if (optOptions.length > 0) dataFinal.push(new Optgroup(dataObj));\n                        }\n                        if (dataObj instanceof Option || \"text\" in dataObj) dataFinal.push(new Option(dataObj));\n                    });\n                    return dataFinal;\n                }\n            },\n            {\n                key: \"setData\",\n                value: function setData(data) {\n                    this.data = this.partialToFullData(data);\n                    if (this.selectType === \"single\") this.setSelectedBy(\"value\", this.getSelected());\n                }\n            },\n            {\n                key: \"getData\",\n                value: function getData() {\n                    return this.filter(null, true);\n                }\n            },\n            {\n                key: \"getDataOptions\",\n                value: function getDataOptions() {\n                    return this.filter(null, false);\n                }\n            },\n            {\n                key: \"addOption\",\n                value: function addOption(option) {\n                    this.setData(this.getData().concat(new Option(option)));\n                }\n            },\n            {\n                key: \"setSelectedBy\",\n                value: function setSelectedBy(selectedType, selectedValues) {\n                    var firstOption = null;\n                    var hasSelected = false;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = this.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var dataObj = _step.value;\n                            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                            if (dataObj instanceof Optgroup) try {\n                                for(var _iterator1 = dataObj.options[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                    var option = _step1.value;\n                                    if (!firstOption) firstOption = option;\n                                    option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                                    if (option.selected && this.selectType === \"single\") hasSelected = true;\n                                }\n                            } catch (err) {\n                                _didIteratorError1 = true;\n                                _iteratorError1 = err;\n                            } finally{\n                                try {\n                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                        _iterator1.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError1) {\n                                        throw _iteratorError1;\n                                    }\n                                }\n                            }\n                            if (dataObj instanceof Option) {\n                                if (!firstOption) firstOption = dataObj;\n                                dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                                if (dataObj.selected && this.selectType === \"single\") hasSelected = true;\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    if (this.selectType === \"single\" && firstOption && !hasSelected) firstOption.selected = true;\n                }\n            },\n            {\n                key: \"getSelected\",\n                value: function getSelected() {\n                    var selectedOptions = this.getSelectedOptions();\n                    var selectedValues = [];\n                    selectedOptions.forEach(function(option) {\n                        selectedValues.push(option.value);\n                    });\n                    return selectedValues;\n                }\n            },\n            {\n                key: \"getSelectedOptions\",\n                value: function getSelectedOptions() {\n                    return this.filter(function(opt) {\n                        return opt.selected;\n                    }, false);\n                }\n            },\n            {\n                key: \"getSelectedIDs\",\n                value: function getSelectedIDs() {\n                    var selectedOptions = this.getSelectedOptions();\n                    var selectedIDs = [];\n                    selectedOptions.forEach(function(op) {\n                        selectedIDs.push(op.id);\n                    });\n                    return selectedIDs;\n                }\n            },\n            {\n                key: \"getOptgroupByID\",\n                value: function getOptgroupByID(id) {\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = this.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var dataObj = _step.value;\n                            if (dataObj instanceof Optgroup && dataObj.id === id) return dataObj;\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return null;\n                }\n            },\n            {\n                key: \"getOptionByID\",\n                value: function getOptionByID(id) {\n                    var options = this.filter(function(opt) {\n                        return opt.id === id;\n                    }, false);\n                    return options.length ? options[0] : null;\n                }\n            },\n            {\n                key: \"search\",\n                value: function search(search, searchFilter) {\n                    search = search.trim();\n                    if (search === \"\") return this.getData();\n                    return this.filter(function(opt) {\n                        return searchFilter(opt, search);\n                    }, true);\n                }\n            },\n            {\n                key: \"filter\",\n                value: function filter(filter, includeOptgroup) {\n                    var dataSearch = [];\n                    this.data.forEach(function(dataObj) {\n                        if (dataObj instanceof Optgroup) {\n                            var optOptions = [];\n                            dataObj.options.forEach(function(option) {\n                                if (!filter || filter(option)) {\n                                    if (!includeOptgroup) dataSearch.push(new Option(option));\n                                    else optOptions.push(new Option(option));\n                                }\n                            });\n                            if (optOptions.length > 0) {\n                                var optgroup = new Optgroup(dataObj);\n                                optgroup.options = optOptions;\n                                dataSearch.push(optgroup);\n                            }\n                        }\n                        if (dataObj instanceof Option) {\n                            if (!filter || filter(dataObj)) dataSearch.push(new Option(dataObj));\n                        }\n                    });\n                    return dataSearch;\n                }\n            },\n            {\n                key: \"getSelectType\",\n                value: function getSelectType() {\n                    return this.selectType;\n                }\n            }\n        ]);\n        return Store;\n    }();\n    var Render = /*#__PURE__*/ function() {\n        function Render(settings, store, callbacks) {\n            (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Render);\n            this.classes = {\n                main: \"ss-main\",\n                placeholder: \"ss-placeholder\",\n                values: \"ss-values\",\n                single: \"ss-single\",\n                max: \"ss-max\",\n                value: \"ss-value\",\n                valueText: \"ss-value-text\",\n                valueDelete: \"ss-value-delete\",\n                valueOut: \"ss-value-out\",\n                deselect: \"ss-deselect\",\n                deselectPath: \"M10,10 L90,90 M10,90 L90,10\",\n                arrow: \"ss-arrow\",\n                arrowClose: \"M10,30 L50,70 L90,30\",\n                arrowOpen: \"M10,70 L50,30 L90,70\",\n                content: \"ss-content\",\n                openAbove: \"ss-open-above\",\n                openBelow: \"ss-open-below\",\n                search: \"ss-search\",\n                searchHighlighter: \"ss-search-highlight\",\n                searching: \"ss-searching\",\n                addable: \"ss-addable\",\n                addablePath: \"M50,10 L50,90 M10,50 L90,50\",\n                list: \"ss-list\",\n                optgroup: \"ss-optgroup\",\n                optgroupLabel: \"ss-optgroup-label\",\n                optgroupLabelText: \"ss-optgroup-label-text\",\n                optgroupActions: \"ss-optgroup-actions\",\n                optgroupSelectAll: \"ss-selectall\",\n                optgroupSelectAllBox: \"M60,10 L10,10 L10,90 L90,90 L90,50\",\n                optgroupSelectAllCheck: \"M30,45 L50,70 L90,10\",\n                optgroupClosable: \"ss-closable\",\n                option: \"ss-option\",\n                optionDelete: \"M10,10 L90,90 M10,90 L90,10\",\n                highlighted: \"ss-highlighted\",\n                open: \"ss-open\",\n                close: \"ss-close\",\n                selected: \"ss-selected\",\n                error: \"ss-error\",\n                disabled: \"ss-disabled\",\n                hide: \"ss-hide\"\n            };\n            this.store = store;\n            this.settings = settings;\n            this.callbacks = callbacks;\n            this.main = this.mainDiv();\n            this.content = this.contentDiv();\n            this.updateClassStyles();\n            this.updateAriaAttributes();\n            this.settings.contentLocation.appendChild(this.content.main);\n        }\n        (0, $89767be5ae191d10$export$d60067ff2358eee8)(Render, [\n            {\n                key: \"enable\",\n                value: function enable() {\n                    this.main.main.classList.remove(this.classes.disabled);\n                    this.content.search.input.disabled = false;\n                }\n            },\n            {\n                key: \"disable\",\n                value: function disable() {\n                    this.main.main.classList.add(this.classes.disabled);\n                    this.content.search.input.disabled = true;\n                }\n            },\n            {\n                key: \"open\",\n                value: function open() {\n                    this.main.arrow.path.setAttribute(\"d\", this.classes.arrowOpen);\n                    this.main.main.classList.add(this.settings.openPosition === \"up\" ? this.classes.openAbove : this.classes.openBelow);\n                    this.main.main.setAttribute(\"aria-expanded\", \"true\");\n                    this.moveContent();\n                    var selectedOptions = this.store.getSelectedOptions();\n                    if (selectedOptions.length) {\n                        var selectedId = selectedOptions[selectedOptions.length - 1].id;\n                        var selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n                        if (selectedOption) this.ensureElementInView(this.content.list, selectedOption);\n                    }\n                }\n            },\n            {\n                key: \"close\",\n                value: function close() {\n                    this.main.main.classList.remove(this.classes.openAbove);\n                    this.main.main.classList.remove(this.classes.openBelow);\n                    this.main.main.setAttribute(\"aria-expanded\", \"false\");\n                    this.content.main.classList.remove(this.classes.openAbove);\n                    this.content.main.classList.remove(this.classes.openBelow);\n                    this.main.arrow.path.setAttribute(\"d\", this.classes.arrowClose);\n                }\n            },\n            {\n                key: \"updateClassStyles\",\n                value: function updateClassStyles() {\n                    this.main.main.className = \"\";\n                    this.main.main.removeAttribute(\"style\");\n                    this.content.main.className = \"\";\n                    this.content.main.removeAttribute(\"style\");\n                    this.main.main.classList.add(this.classes.main);\n                    this.content.main.classList.add(this.classes.content);\n                    if (this.settings.style !== \"\") {\n                        this.main.main.style.cssText = this.settings.style;\n                        this.content.main.style.cssText = this.settings.style;\n                    }\n                    if (this.settings.class.length) {\n                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            for(var _iterator = this.settings.class[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                var c = _step.value;\n                                if (c.trim() !== \"\") {\n                                    this.main.main.classList.add(c.trim());\n                                    this.content.main.classList.add(c.trim());\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    }\n                    if (this.settings.contentPosition === \"relative\") this.content.main.classList.add(\"ss-\" + this.settings.contentPosition);\n                }\n            },\n            {\n                key: \"updateAriaAttributes\",\n                value: function updateAriaAttributes() {\n                    this.main.main.role = \"combobox\";\n                    this.main.main.setAttribute(\"aria-haspopup\", \"listbox\");\n                    this.main.main.setAttribute(\"aria-controls\", this.content.main.id);\n                    this.main.main.setAttribute(\"aria-expanded\", \"false\");\n                    this.content.main.setAttribute(\"role\", \"listbox\");\n                }\n            },\n            {\n                key: \"mainDiv\",\n                value: function mainDiv() {\n                    var _this = this;\n                    var _a;\n                    var main = document.createElement(\"div\");\n                    main.dataset.id = this.settings.id;\n                    main.id = this.settings.id;\n                    main.tabIndex = 0;\n                    main.onkeydown = function(e) {\n                        switch(e.key){\n                            case \"ArrowUp\":\n                            case \"ArrowDown\":\n                                _this.callbacks.open();\n                                e.key === \"ArrowDown\" ? _this.highlight(\"down\") : _this.highlight(\"up\");\n                                return false;\n                            case \"Tab\":\n                                _this.callbacks.close();\n                                return true;\n                            case \"Enter\":\n                            case \" \":\n                                _this.callbacks.open();\n                                var highlighted = _this.content.list.querySelector(\".\" + _this.classes.highlighted);\n                                if (highlighted) highlighted.click();\n                                return false;\n                            case \"Escape\":\n                                _this.callbacks.close();\n                                return false;\n                        }\n                    };\n                    main.onclick = function(e) {\n                        if (_this.settings.disabled) return;\n                        _this.settings.isOpen ? _this.callbacks.close() : _this.callbacks.open();\n                    };\n                    var values = document.createElement(\"div\");\n                    values.classList.add(this.classes.values);\n                    main.appendChild(values);\n                    var deselect = document.createElement(\"div\");\n                    deselect.classList.add(this.classes.deselect);\n                    var selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n                    if (!this.settings.allowDeselect || this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0) deselect.classList.add(this.classes.hide);\n                    else deselect.classList.remove(this.classes.hide);\n                    deselect.onclick = function(e) {\n                        e.stopPropagation();\n                        if (_this.settings.disabled) return;\n                        var shouldDelete = true;\n                        var before = _this.store.getSelectedOptions();\n                        var after = [];\n                        if (_this.callbacks.beforeChange) shouldDelete = _this.callbacks.beforeChange(after, before) === true;\n                        if (shouldDelete) {\n                            if (_this.settings.isMultiple) {\n                                _this.callbacks.setSelected([], false);\n                                _this.updateDeselectAll();\n                            } else _this.callbacks.setSelected([\n                                \"\"\n                            ], false);\n                            if (_this.settings.closeOnSelect) _this.callbacks.close();\n                            if (_this.callbacks.afterChange) _this.callbacks.afterChange(after);\n                        }\n                    };\n                    var deselectSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    deselectSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                    var deselectPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                    deselectPath.setAttribute(\"d\", this.classes.deselectPath);\n                    deselectSvg.appendChild(deselectPath);\n                    deselect.appendChild(deselectSvg);\n                    main.appendChild(deselect);\n                    var arrow = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    arrow.classList.add(this.classes.arrow);\n                    arrow.setAttribute(\"viewBox\", \"0 0 100 100\");\n                    var arrowPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                    arrowPath.setAttribute(\"d\", this.classes.arrowClose);\n                    if (this.settings.alwaysOpen) arrow.classList.add(this.classes.hide);\n                    arrow.appendChild(arrowPath);\n                    main.appendChild(arrow);\n                    return {\n                        main: main,\n                        values: values,\n                        deselect: {\n                            main: deselect,\n                            svg: deselectSvg,\n                            path: deselectPath\n                        },\n                        arrow: {\n                            main: arrow,\n                            path: arrowPath\n                        }\n                    };\n                }\n            },\n            {\n                key: \"mainFocus\",\n                value: function mainFocus(eventType) {\n                    if (eventType !== \"click\") this.main.main.focus({\n                        preventScroll: true\n                    });\n                }\n            },\n            {\n                key: \"placeholder\",\n                value: function placeholder() {\n                    var placeholderOption = this.store.filter(function(o) {\n                        return o.placeholder;\n                    }, false);\n                    var placeholderText = this.settings.placeholderText;\n                    if (placeholderOption.length) {\n                        if (placeholderOption[0].html !== \"\") placeholderText = placeholderOption[0].html;\n                        else if (placeholderOption[0].text !== \"\") placeholderText = placeholderOption[0].text;\n                    }\n                    var placeholder = document.createElement(\"div\");\n                    placeholder.classList.add(this.classes.placeholder);\n                    placeholder.innerHTML = placeholderText;\n                    return placeholder;\n                }\n            },\n            {\n                key: \"renderValues\",\n                value: function renderValues() {\n                    if (!this.settings.isMultiple) {\n                        this.renderSingleValue();\n                        return;\n                    }\n                    this.renderMultipleValues();\n                }\n            },\n            {\n                key: \"renderSingleValue\",\n                value: function renderSingleValue() {\n                    var selected = this.store.filter(function(o) {\n                        return o.selected && !o.placeholder;\n                    }, false);\n                    var selectedSingle = selected.length > 0 ? selected[0] : null;\n                    if (!selectedSingle) this.main.values.innerHTML = this.placeholder().outerHTML;\n                    else {\n                        var singleValue = document.createElement(\"div\");\n                        singleValue.classList.add(this.classes.single);\n                        if (selectedSingle.html) singleValue.innerHTML = selectedSingle.html;\n                        else singleValue.innerText = selectedSingle.text;\n                        this.main.values.innerHTML = singleValue.outerHTML;\n                    }\n                    if (!this.settings.allowDeselect || !selected.length) this.main.deselect.main.classList.add(this.classes.hide);\n                    else this.main.deselect.main.classList.remove(this.classes.hide);\n                }\n            },\n            {\n                key: \"renderMultipleValues\",\n                value: function renderMultipleValues() {\n                    var _loop = function(i) {\n                        var node = currentNodes[i];\n                        var id = node.getAttribute(\"data-id\");\n                        if (id) {\n                            var found = selectedOptions.filter(function(opt) {\n                                return opt.id === id;\n                            }, false);\n                            if (!found.length) removeNodes.push(node);\n                        }\n                    };\n                    var _this = this;\n                    var currentNodes = this.main.values.childNodes;\n                    var selectedOptions = this.store.filter(function(opt) {\n                        return opt.selected && opt.display;\n                    }, false);\n                    if (selectedOptions.length === 0) {\n                        this.main.values.innerHTML = this.placeholder().outerHTML;\n                        return;\n                    } else {\n                        var placeholder = this.main.values.querySelector(\".\" + this.classes.placeholder);\n                        if (placeholder) placeholder.remove();\n                    }\n                    if (selectedOptions.length > this.settings.maxValuesShown) {\n                        var singleValue = document.createElement(\"div\");\n                        singleValue.classList.add(this.classes.max);\n                        singleValue.textContent = this.settings.maxValuesMessage.replace(\"{number}\", selectedOptions.length.toString());\n                        this.main.values.innerHTML = singleValue.outerHTML;\n                        return;\n                    } else {\n                        var maxValuesMessage = this.main.values.querySelector(\".\" + this.classes.max);\n                        if (maxValuesMessage) maxValuesMessage.remove();\n                    }\n                    var removeNodes = [];\n                    for(var i = 0; i < currentNodes.length; i++)_loop(i);\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        var _this1 = this, _loop1 = function() {\n                            var n = _step.value;\n                            n.classList.add(_this1.classes.valueOut);\n                            setTimeout(function() {\n                                if (_this.main.values.hasChildNodes() && _this.main.values.contains(n)) _this.main.values.removeChild(n);\n                            }, 100);\n                        };\n                        for(var _iterator = removeNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop1();\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    currentNodes = this.main.values.childNodes;\n                    for(var d = 0; d < selectedOptions.length; d++){\n                        var shouldAdd = true;\n                        for(var i1 = 0; i1 < currentNodes.length; i1++)if (selectedOptions[d].id === String(currentNodes[i1].dataset.id)) shouldAdd = false;\n                        if (shouldAdd) {\n                            if (currentNodes.length === 0) this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                            else if (d === 0) this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                            else currentNodes[d - 1].insertAdjacentElement(\"afterend\", this.multipleValue(selectedOptions[d]));\n                        }\n                    }\n                    this.updateDeselectAll();\n                }\n            },\n            {\n                key: \"multipleValue\",\n                value: function multipleValue(option) {\n                    var _this = this;\n                    var value = document.createElement(\"div\");\n                    value.classList.add(this.classes.value);\n                    value.dataset.id = option.id;\n                    var text = document.createElement(\"div\");\n                    text.classList.add(this.classes.valueText);\n                    text.innerText = option.text;\n                    value.appendChild(text);\n                    if (!option.mandatory) {\n                        var deleteDiv = document.createElement(\"div\");\n                        deleteDiv.classList.add(this.classes.valueDelete);\n                        deleteDiv.onclick = function(e) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (_this.settings.disabled) return;\n                            var shouldDelete = true;\n                            var before = _this.store.getSelectedOptions();\n                            var after = before.filter(function(o) {\n                                return o.selected && o.id !== option.id;\n                            }, true);\n                            if (_this.settings.minSelected && after.length < _this.settings.minSelected) return;\n                            if (_this.callbacks.beforeChange) shouldDelete = _this.callbacks.beforeChange(after, before) === true;\n                            if (shouldDelete) {\n                                var selectedValues = [];\n                                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                try {\n                                    for(var _iterator = after[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                        var o = _step.value;\n                                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                        if (o instanceof Optgroup) try {\n                                            for(var _iterator1 = o.options[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                                var c = _step1.value;\n                                                selectedValues.push(c.value);\n                                            }\n                                        } catch (err) {\n                                            _didIteratorError1 = true;\n                                            _iteratorError1 = err;\n                                        } finally{\n                                            try {\n                                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                                    _iterator1.return();\n                                                }\n                                            } finally{\n                                                if (_didIteratorError1) {\n                                                    throw _iteratorError1;\n                                                }\n                                            }\n                                        }\n                                        if (o instanceof Option) selectedValues.push(o.value);\n                                    }\n                                } catch (err) {\n                                    _didIteratorError = true;\n                                    _iteratorError = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                            _iterator.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError) {\n                                            throw _iteratorError;\n                                        }\n                                    }\n                                }\n                                _this.callbacks.setSelected(selectedValues, false);\n                                if (_this.settings.closeOnSelect) _this.callbacks.close();\n                                if (_this.callbacks.afterChange) _this.callbacks.afterChange(after);\n                                _this.updateDeselectAll();\n                            }\n                        };\n                        var deleteSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                        deleteSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                        var deletePath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                        deletePath.setAttribute(\"d\", this.classes.optionDelete);\n                        deleteSvg.appendChild(deletePath);\n                        deleteDiv.appendChild(deleteSvg);\n                        value.appendChild(deleteDiv);\n                    }\n                    return value;\n                }\n            },\n            {\n                key: \"contentDiv\",\n                value: function contentDiv() {\n                    var main = document.createElement(\"div\");\n                    main.dataset.id = this.settings.id;\n                    main.id = this.settings.id;\n                    var search = this.searchDiv();\n                    main.appendChild(search.main);\n                    var list = this.listDiv();\n                    main.appendChild(list);\n                    return {\n                        main: main,\n                        search: search,\n                        list: list\n                    };\n                }\n            },\n            {\n                key: \"moveContent\",\n                value: function moveContent() {\n                    if (this.settings.contentPosition === \"relative\") {\n                        this.moveContentBelow();\n                        return;\n                    }\n                    if (this.settings.openPosition === \"down\") {\n                        this.moveContentBelow();\n                        return;\n                    } else if (this.settings.openPosition === \"up\") {\n                        this.moveContentAbove();\n                        return;\n                    }\n                    if (this.putContent() === \"up\") this.moveContentAbove();\n                    else this.moveContentBelow();\n                }\n            },\n            {\n                key: \"searchDiv\",\n                value: function searchDiv() {\n                    var _this = this;\n                    var main = document.createElement(\"div\");\n                    var input = document.createElement(\"input\");\n                    var addable = document.createElement(\"div\");\n                    main.classList.add(this.classes.search);\n                    var searchReturn = {\n                        main: main,\n                        input: input\n                    };\n                    if (!this.settings.showSearch) {\n                        main.classList.add(this.classes.hide);\n                        input.readOnly = true;\n                    }\n                    input.type = \"search\";\n                    input.placeholder = this.settings.searchPlaceholder;\n                    input.tabIndex = -1;\n                    input.setAttribute(\"aria-label\", this.settings.searchPlaceholder);\n                    input.setAttribute(\"autocapitalize\", \"off\");\n                    input.setAttribute(\"autocomplete\", \"off\");\n                    input.setAttribute(\"autocorrect\", \"off\");\n                    input.oninput = debounce(function(e) {\n                        _this.callbacks.search(e.target.value);\n                    }, 100);\n                    input.onkeydown = function(e) {\n                        switch(e.key){\n                            case \"ArrowUp\":\n                            case \"ArrowDown\":\n                                e.key === \"ArrowDown\" ? _this.highlight(\"down\") : _this.highlight(\"up\");\n                                return false;\n                            case \"Tab\":\n                                _this.callbacks.close();\n                                return true;\n                            case \"Escape\":\n                                _this.callbacks.close();\n                                return false;\n                            case \"Enter\":\n                            case \" \":\n                                if (_this.callbacks.addable && e.ctrlKey) {\n                                    addable.click();\n                                    return false;\n                                } else {\n                                    var highlighted = _this.content.list.querySelector(\".\" + _this.classes.highlighted);\n                                    if (highlighted) {\n                                        highlighted.click();\n                                        return false;\n                                    }\n                                }\n                                return true;\n                        }\n                    };\n                    main.appendChild(input);\n                    if (this.callbacks.addable) {\n                        addable.classList.add(this.classes.addable);\n                        var plus = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                        plus.setAttribute(\"viewBox\", \"0 0 100 100\");\n                        var plusPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                        plusPath.setAttribute(\"d\", this.classes.addablePath);\n                        plus.appendChild(plusPath);\n                        addable.appendChild(plus);\n                        addable.onclick = function(e) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (!_this.callbacks.addable) return;\n                            var inputValue = _this.content.search.input.value.trim();\n                            if (inputValue === \"\") {\n                                _this.content.search.input.focus();\n                                return;\n                            }\n                            var runFinish = function(oo) {\n                                var newOption = new Option(oo);\n                                _this.callbacks.addOption(newOption);\n                                if (_this.settings.isMultiple) {\n                                    var values = _this.store.getSelected();\n                                    values.push(newOption.value);\n                                    _this.callbacks.setSelected(values, true);\n                                } else _this.callbacks.setSelected([\n                                    newOption.value\n                                ], true);\n                                _this.callbacks.search(\"\");\n                                if (_this.settings.closeOnSelect) setTimeout(function() {\n                                    _this.callbacks.close();\n                                }, 100);\n                            };\n                            var addableValue = _this.callbacks.addable(inputValue);\n                            if (addableValue === false || addableValue === undefined || addableValue === null) return;\n                            if (addableValue instanceof Promise) addableValue.then(function(value) {\n                                if (typeof value === \"string\") runFinish({\n                                    text: value,\n                                    value: value\n                                });\n                                else runFinish(value);\n                            });\n                            else if (typeof addableValue === \"string\") runFinish({\n                                text: addableValue,\n                                value: addableValue\n                            });\n                            else runFinish(addableValue);\n                            return;\n                        };\n                        main.appendChild(addable);\n                        searchReturn.addable = {\n                            main: addable,\n                            svg: plus,\n                            path: plusPath\n                        };\n                    }\n                    return searchReturn;\n                }\n            },\n            {\n                key: \"searchFocus\",\n                value: function searchFocus() {\n                    this.content.search.input.focus();\n                }\n            },\n            {\n                key: \"getOptions\",\n                value: function getOptions() {\n                    var notPlaceholder = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, notDisabled = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, notHidden = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                    var query = \".\" + this.classes.option;\n                    if (notPlaceholder) query += \":not(.\" + this.classes.placeholder + \")\";\n                    if (notDisabled) query += \":not(.\" + this.classes.disabled + \")\";\n                    if (notHidden) query += \":not(.\" + this.classes.hide + \")\";\n                    return Array.from(this.content.list.querySelectorAll(query));\n                }\n            },\n            {\n                key: \"highlight\",\n                value: function highlight(dir) {\n                    var options = this.getOptions(true, true, true);\n                    if (options.length === 0) return;\n                    if (options.length === 1) {\n                        if (!options[0].classList.contains(this.classes.highlighted)) {\n                            options[0].classList.add(this.classes.highlighted);\n                            return;\n                        }\n                    }\n                    for(var i = 0; i < options.length; i++)if (options[i].classList.contains(this.classes.highlighted)) {\n                        var prevOption = options[i];\n                        prevOption.classList.remove(this.classes.highlighted);\n                        var prevParent = prevOption.parentElement;\n                        if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                            var optgroupLabel = prevParent.querySelector(\".\" + this.classes.optgroupLabel);\n                            if (optgroupLabel) optgroupLabel.click();\n                        }\n                        var selectOption = options[dir === \"down\" ? i + 1 < options.length ? i + 1 : 0 : i - 1 >= 0 ? i - 1 : options.length - 1];\n                        selectOption.classList.add(this.classes.highlighted);\n                        this.ensureElementInView(this.content.list, selectOption);\n                        var selectParent = selectOption.parentElement;\n                        if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                            var optgroupLabel1 = selectParent.querySelector(\".\" + this.classes.optgroupLabel);\n                            if (optgroupLabel1) optgroupLabel1.click();\n                        }\n                        return;\n                    }\n                    options[dir === \"down\" ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n                    this.ensureElementInView(this.content.list, options[dir === \"down\" ? 0 : options.length - 1]);\n                }\n            },\n            {\n                key: \"listDiv\",\n                value: function listDiv() {\n                    var options = document.createElement(\"div\");\n                    options.classList.add(this.classes.list);\n                    return options;\n                }\n            },\n            {\n                key: \"renderError\",\n                value: function renderError(error) {\n                    this.content.list.innerHTML = \"\";\n                    var errorDiv = document.createElement(\"div\");\n                    errorDiv.classList.add(this.classes.error);\n                    errorDiv.textContent = error;\n                    this.content.list.appendChild(errorDiv);\n                }\n            },\n            {\n                key: \"renderSearching\",\n                value: function renderSearching() {\n                    this.content.list.innerHTML = \"\";\n                    var searchingDiv = document.createElement(\"div\");\n                    searchingDiv.classList.add(this.classes.searching);\n                    searchingDiv.textContent = this.settings.searchingText;\n                    this.content.list.appendChild(searchingDiv);\n                }\n            },\n            {\n                key: \"renderOptions\",\n                value: function renderOptions(data) {\n                    var _this = this;\n                    this.content.list.innerHTML = \"\";\n                    if (data.length === 0) {\n                        var noResults = document.createElement(\"div\");\n                        noResults.classList.add(this.classes.search);\n                        noResults.innerHTML = this.settings.searchText;\n                        this.content.list.appendChild(noResults);\n                        return;\n                    }\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        var _this1 = this, _loop = function() {\n                            var d = _step.value;\n                            if (d instanceof Optgroup) {\n                                var optgroupEl = document.createElement(\"div\");\n                                optgroupEl.classList.add(_this1.classes.optgroup);\n                                var optgroupLabel = document.createElement(\"div\");\n                                optgroupLabel.classList.add(_this1.classes.optgroupLabel);\n                                optgroupEl.appendChild(optgroupLabel);\n                                var optgroupLabelText = document.createElement(\"div\");\n                                optgroupLabelText.classList.add(_this1.classes.optgroupLabelText);\n                                optgroupLabelText.textContent = d.label;\n                                optgroupLabel.appendChild(optgroupLabelText);\n                                var optgroupActions = document.createElement(\"div\");\n                                optgroupActions.classList.add(_this1.classes.optgroupActions);\n                                optgroupLabel.appendChild(optgroupActions);\n                                if (_this1.settings.isMultiple && d.selectAll) {\n                                    var selectAll = document.createElement(\"div\");\n                                    selectAll.classList.add(_this1.classes.optgroupSelectAll);\n                                    var allSelected = true;\n                                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                    try {\n                                        for(var _iterator = d.options[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                            var o = _step1.value;\n                                            if (!o.selected) {\n                                                allSelected = false;\n                                                break;\n                                            }\n                                        }\n                                    } catch (err) {\n                                        _didIteratorError = true;\n                                        _iteratorError = err;\n                                    } finally{\n                                        try {\n                                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                                _iterator.return();\n                                            }\n                                        } finally{\n                                            if (_didIteratorError) {\n                                                throw _iteratorError;\n                                            }\n                                        }\n                                    }\n                                    if (allSelected) selectAll.classList.add(_this1.classes.selected);\n                                    var selectAllText = document.createElement(\"span\");\n                                    selectAllText.textContent = \"Select All\";\n                                    selectAll.appendChild(selectAllText);\n                                    var selectAllSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                                    selectAllSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                                    selectAll.appendChild(selectAllSvg);\n                                    var selectAllBox = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                                    selectAllBox.setAttribute(\"d\", _this1.classes.optgroupSelectAllBox);\n                                    selectAllSvg.appendChild(selectAllBox);\n                                    var selectAllCheck = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                                    selectAllCheck.setAttribute(\"d\", _this1.classes.optgroupSelectAllCheck);\n                                    selectAllSvg.appendChild(selectAllCheck);\n                                    selectAll.addEventListener(\"click\", function(e) {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n                                        var currentSelected = _this.store.getSelected();\n                                        if (allSelected) {\n                                            var newSelected = currentSelected.filter(function(s) {\n                                                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                                try {\n                                                    for(var _iterator = d.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                                        var o = _step.value;\n                                                        if (s === o.value) return false;\n                                                    }\n                                                } catch (err) {\n                                                    _didIteratorError = true;\n                                                    _iteratorError = err;\n                                                } finally{\n                                                    try {\n                                                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                                            _iterator.return();\n                                                        }\n                                                    } finally{\n                                                        if (_didIteratorError) {\n                                                            throw _iteratorError;\n                                                        }\n                                                    }\n                                                }\n                                                return true;\n                                            });\n                                            _this.callbacks.setSelected(newSelected, true);\n                                            return;\n                                        } else {\n                                            var newSelected1 = currentSelected.concat(d.options.map(function(o) {\n                                                return o.value;\n                                            }));\n                                            _this.callbacks.setSelected(newSelected1, true);\n                                        }\n                                    });\n                                    optgroupActions.appendChild(selectAll);\n                                }\n                                if (d.closable !== \"off\") {\n                                    var optgroupClosable = document.createElement(\"div\");\n                                    optgroupClosable.classList.add(_this1.classes.optgroupClosable);\n                                    var optgroupClosableSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                                    optgroupClosableSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                                    optgroupClosableSvg.classList.add(_this1.classes.arrow);\n                                    optgroupClosable.appendChild(optgroupClosableSvg);\n                                    var optgroupClosableArrow = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                                    optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                                    if (d.options.some(function(o) {\n                                        return o.selected;\n                                    }) || _this1.content.search.input.value.trim() !== \"\") {\n                                        optgroupClosable.classList.add(_this1.classes.open);\n                                        optgroupClosableArrow.setAttribute(\"d\", _this1.classes.arrowOpen);\n                                    } else if (d.closable === \"open\") {\n                                        optgroupEl.classList.add(_this1.classes.open);\n                                        optgroupClosableArrow.setAttribute(\"d\", _this1.classes.arrowOpen);\n                                    } else if (d.closable === \"close\") {\n                                        optgroupEl.classList.add(_this1.classes.close);\n                                        optgroupClosableArrow.setAttribute(\"d\", _this1.classes.arrowClose);\n                                    }\n                                    optgroupLabel.addEventListener(\"click\", function(e) {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n                                        if (optgroupEl.classList.contains(_this.classes.close)) {\n                                            optgroupEl.classList.remove(_this.classes.close);\n                                            optgroupEl.classList.add(_this.classes.open);\n                                            optgroupClosableArrow.setAttribute(\"d\", _this.classes.arrowOpen);\n                                        } else {\n                                            optgroupEl.classList.remove(_this.classes.open);\n                                            optgroupEl.classList.add(_this.classes.close);\n                                            optgroupClosableArrow.setAttribute(\"d\", _this.classes.arrowClose);\n                                        }\n                                    });\n                                    optgroupActions.appendChild(optgroupClosable);\n                                }\n                                optgroupEl.appendChild(optgroupLabel);\n                                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                try {\n                                    for(var _iterator1 = d.options[Symbol.iterator](), _step2; !(_iteratorNormalCompletion1 = (_step2 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        var o1 = _step2.value;\n                                        optgroupEl.appendChild(_this1.option(o1));\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                                _this1.content.list.appendChild(optgroupEl);\n                            }\n                            if (d instanceof Option) _this1.content.list.appendChild(_this1.option(d));\n                        };\n                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                }\n            },\n            {\n                key: \"option\",\n                value: function option(option) {\n                    var _this = this;\n                    if (option.placeholder) {\n                        var placeholder = document.createElement(\"div\");\n                        placeholder.classList.add(this.classes.option);\n                        placeholder.classList.add(this.classes.hide);\n                        return placeholder;\n                    }\n                    var optionEl = document.createElement(\"div\");\n                    optionEl.dataset.id = option.id;\n                    optionEl.id = option.id;\n                    optionEl.classList.add(this.classes.option);\n                    optionEl.setAttribute(\"role\", \"option\");\n                    if (option.class) option.class.split(\" \").forEach(function(dataClass) {\n                        optionEl.classList.add(dataClass);\n                    });\n                    if (option.style) optionEl.style.cssText = option.style;\n                    if (this.settings.searchHighlight && this.content.search.input.value.trim() !== \"\") optionEl.innerHTML = this.highlightText(option.html !== \"\" ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n                    else if (option.html !== \"\") optionEl.innerHTML = option.html;\n                    else optionEl.textContent = option.text;\n                    if (this.settings.showOptionTooltips && optionEl.textContent) optionEl.setAttribute(\"title\", optionEl.textContent);\n                    if (!option.display) optionEl.classList.add(this.classes.hide);\n                    if (option.disabled) optionEl.classList.add(this.classes.disabled);\n                    if (option.selected && this.settings.hideSelected) optionEl.classList.add(this.classes.hide);\n                    if (option.selected) {\n                        optionEl.classList.add(this.classes.selected);\n                        optionEl.setAttribute(\"aria-selected\", \"true\");\n                        this.main.main.setAttribute(\"aria-activedescendant\", optionEl.id);\n                    } else {\n                        optionEl.classList.remove(this.classes.selected);\n                        optionEl.setAttribute(\"aria-selected\", \"false\");\n                    }\n                    optionEl.addEventListener(\"click\", function(e) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        var selectedOptions = _this.store.getSelected();\n                        var element = e.currentTarget;\n                        var elementID = String(element.dataset.id);\n                        if (option.disabled || option.selected && !_this.settings.allowDeselect) return;\n                        if (_this.settings.isMultiple && _this.settings.maxSelected <= selectedOptions.length && !option.selected || _this.settings.isMultiple && _this.settings.minSelected >= selectedOptions.length && option.selected) return;\n                        var shouldUpdate = false;\n                        var before = _this.store.getSelectedOptions();\n                        var after = [];\n                        if (_this.settings.isMultiple) {\n                            if (option.selected) after = before.filter(function(o) {\n                                return o.id !== elementID;\n                            });\n                            else after = before.concat(option);\n                        }\n                        if (!_this.settings.isMultiple) {\n                            if (option.selected) after = [];\n                            else after = [\n                                option\n                            ];\n                        }\n                        if (!_this.callbacks.beforeChange) shouldUpdate = true;\n                        if (_this.callbacks.beforeChange) {\n                            if (_this.callbacks.beforeChange(after, before) === false) shouldUpdate = false;\n                            else shouldUpdate = true;\n                        }\n                        if (shouldUpdate) {\n                            if (!_this.store.getOptionByID(elementID)) _this.callbacks.addOption(option);\n                            _this.callbacks.setSelected(after.map(function(o) {\n                                return o.value;\n                            }), false);\n                            if (_this.settings.closeOnSelect) _this.callbacks.close();\n                            if (_this.callbacks.afterChange) _this.callbacks.afterChange(after);\n                        }\n                    });\n                    return optionEl;\n                }\n            },\n            {\n                key: \"destroy\",\n                value: function destroy() {\n                    this.main.main.remove();\n                    this.content.main.remove();\n                }\n            },\n            {\n                key: \"highlightText\",\n                value: function highlightText(str, search, className) {\n                    var completedString = str;\n                    var regex = new RegExp(\"(\" + search.trim() + \")(?![^<]*>[^<>]*</)\", \"i\");\n                    if (!str.match(regex)) return str;\n                    var matchStartPosition = str.match(regex).index;\n                    var matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n                    var originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n                    completedString = completedString.replace(regex, '<mark class=\"'.concat(className, '\">').concat(originalTextFoundByRegex, \"</mark>\"));\n                    return completedString;\n                }\n            },\n            {\n                key: \"moveContentAbove\",\n                value: function moveContentAbove() {\n                    var mainHeight = this.main.main.offsetHeight;\n                    var contentHeight = this.content.main.offsetHeight;\n                    this.main.main.classList.remove(this.classes.openBelow);\n                    this.main.main.classList.add(this.classes.openAbove);\n                    this.content.main.classList.remove(this.classes.openBelow);\n                    this.content.main.classList.add(this.classes.openAbove);\n                    var containerRect = this.main.main.getBoundingClientRect();\n                    this.content.main.style.margin = \"-\" + (mainHeight + contentHeight - 1) + \"px 0px 0px 0px\";\n                    this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + \"px\";\n                    this.content.main.style.left = containerRect.left + window.scrollX + \"px\";\n                    this.content.main.style.width = containerRect.width + \"px\";\n                }\n            },\n            {\n                key: \"moveContentBelow\",\n                value: function moveContentBelow() {\n                    this.main.main.classList.remove(this.classes.openAbove);\n                    this.main.main.classList.add(this.classes.openBelow);\n                    this.content.main.classList.remove(this.classes.openAbove);\n                    this.content.main.classList.add(this.classes.openBelow);\n                    var containerRect = this.main.main.getBoundingClientRect();\n                    this.content.main.style.margin = \"-1px 0px 0px 0px\";\n                    if (this.settings.contentPosition !== \"relative\") {\n                        this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + \"px\";\n                        this.content.main.style.left = containerRect.left + window.scrollX + \"px\";\n                        this.content.main.style.width = containerRect.width + \"px\";\n                    }\n                }\n            },\n            {\n                key: \"ensureElementInView\",\n                value: function ensureElementInView(container, element) {\n                    var cTop = container.scrollTop + container.offsetTop;\n                    var cBottom = cTop + container.clientHeight;\n                    var eTop = element.offsetTop;\n                    var eBottom = eTop + element.clientHeight;\n                    if (eTop < cTop) container.scrollTop -= cTop - eTop;\n                    else if (eBottom > cBottom) container.scrollTop += eBottom - cBottom;\n                }\n            },\n            {\n                key: \"putContent\",\n                value: function putContent() {\n                    var mainHeight = this.main.main.offsetHeight;\n                    var mainRect = this.main.main.getBoundingClientRect();\n                    var contentHeight = this.content.main.offsetHeight;\n                    var spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n                    if (spaceBelow <= contentHeight) {\n                        if (mainRect.top > contentHeight) return \"up\";\n                        else return \"down\";\n                    }\n                    return \"down\";\n                }\n            },\n            {\n                key: \"updateDeselectAll\",\n                value: function updateDeselectAll() {\n                    if (!this.store || !this.settings) return;\n                    var selected = this.store.getSelectedOptions();\n                    var hasSelectedItems = selected && selected.length > 0;\n                    var isMultiple = this.settings.isMultiple;\n                    var allowDeselect = this.settings.allowDeselect;\n                    var deselectButton = this.main.deselect.main;\n                    var hideClass = this.classes.hide;\n                    if (allowDeselect && !(isMultiple && !hasSelectedItems)) deselectButton.classList.remove(hideClass);\n                    else deselectButton.classList.add(hideClass);\n                }\n            }\n        ]);\n        return Render;\n    }();\n    var Select = /*#__PURE__*/ function() {\n        function Select(select) {\n            (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, Select);\n            this.listen = false;\n            this.observer = null;\n            this.select = select;\n            this.select.addEventListener(\"change\", this.valueChange.bind(this), {\n                passive: true\n            });\n            this.observer = new MutationObserver(this.observeCall.bind(this));\n            this.changeListen(true);\n        }\n        (0, $89767be5ae191d10$export$d60067ff2358eee8)(Select, [\n            {\n                key: \"enable\",\n                value: function enable() {\n                    this.select.disabled = false;\n                }\n            },\n            {\n                key: \"disable\",\n                value: function disable() {\n                    this.select.disabled = true;\n                }\n            },\n            {\n                key: \"hideUI\",\n                value: function hideUI() {\n                    this.select.tabIndex = -1;\n                    this.select.style.display = \"none\";\n                    this.select.setAttribute(\"aria-hidden\", \"true\");\n                }\n            },\n            {\n                key: \"showUI\",\n                value: function showUI() {\n                    this.select.removeAttribute(\"tabindex\");\n                    this.select.style.display = \"\";\n                    this.select.removeAttribute(\"aria-hidden\");\n                }\n            },\n            {\n                key: \"changeListen\",\n                value: function changeListen(listen) {\n                    this.listen = listen;\n                    if (listen) {\n                        if (this.observer) this.observer.observe(this.select, {\n                            subtree: true,\n                            childList: true,\n                            attributes: true\n                        });\n                    }\n                    if (!listen) {\n                        if (this.observer) this.observer.disconnect();\n                    }\n                }\n            },\n            {\n                key: \"valueChange\",\n                value: function valueChange(ev) {\n                    if (this.listen && this.onValueChange) this.onValueChange(this.getSelectedValues());\n                    return true;\n                }\n            },\n            {\n                key: \"observeCall\",\n                value: function observeCall(mutations) {\n                    if (!this.listen) return;\n                    var classChanged = false;\n                    var disabledChanged = false;\n                    var optgroupOptionChanged = false;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = mutations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var m = _step.value;\n                            if (m.target === this.select) {\n                                if (m.attributeName === \"disabled\") disabledChanged = true;\n                                if (m.attributeName === \"class\") classChanged = true;\n                            }\n                            if (m.target.nodeName === \"OPTGROUP\" || m.target.nodeName === \"OPTION\") optgroupOptionChanged = true;\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    if (classChanged && this.onClassChange) this.onClassChange(this.select.className.split(\" \"));\n                    if (disabledChanged && this.onDisabledChange) {\n                        this.changeListen(false);\n                        this.onDisabledChange(this.select.disabled);\n                        this.changeListen(true);\n                    }\n                    if (optgroupOptionChanged && this.onOptionsChange) {\n                        this.changeListen(false);\n                        this.onOptionsChange(this.getData());\n                        this.changeListen(true);\n                    }\n                }\n            },\n            {\n                key: \"getData\",\n                value: function getData() {\n                    var data = [];\n                    var nodes = this.select.childNodes;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var n = _step.value;\n                            if (n.nodeName === \"OPTGROUP\") data.push(this.getDataFromOptgroup(n));\n                            if (n.nodeName === \"OPTION\") data.push(this.getDataFromOption(n));\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return data;\n                }\n            },\n            {\n                key: \"getDataFromOptgroup\",\n                value: function getDataFromOptgroup(optgroup) {\n                    var data = {\n                        id: optgroup.id,\n                        label: optgroup.label,\n                        selectAll: optgroup.dataset ? optgroup.dataset.selectall === \"true\" : false,\n                        closable: optgroup.dataset ? optgroup.dataset.closable : \"off\",\n                        options: []\n                    };\n                    var options = optgroup.childNodes;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var o = _step.value;\n                            if (o.nodeName === \"OPTION\") data.options.push(this.getDataFromOption(o));\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return data;\n                }\n            },\n            {\n                key: \"getDataFromOption\",\n                value: function getDataFromOption(option) {\n                    return {\n                        id: option.id,\n                        value: option.value,\n                        text: option.text,\n                        html: option.dataset && option.dataset.html ? option.dataset.html : \"\",\n                        selected: option.selected,\n                        display: option.style.display === \"none\" ? false : true,\n                        disabled: option.disabled,\n                        mandatory: option.dataset ? option.dataset.mandatory === \"true\" : false,\n                        placeholder: option.dataset.placeholder === \"true\",\n                        class: option.className,\n                        style: option.style.cssText,\n                        data: option.dataset\n                    };\n                }\n            },\n            {\n                key: \"getSelectedValues\",\n                value: function getSelectedValues() {\n                    var values = [];\n                    var options = this.select.childNodes;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var o = _step.value;\n                            if (o.nodeName === \"OPTGROUP\") {\n                                var optgroupOptions = o.childNodes;\n                                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                try {\n                                    for(var _iterator1 = optgroupOptions[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        var oo = _step1.value;\n                                        if (oo.nodeName === \"OPTION\") {\n                                            var option = oo;\n                                            if (option.selected) values.push(option.value);\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                            }\n                            if (o.nodeName === \"OPTION\") {\n                                var option1 = o;\n                                if (option1.selected) values.push(option1.value);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return values;\n                }\n            },\n            {\n                key: \"setSelected\",\n                value: function setSelected(value) {\n                    this.changeListen(false);\n                    var options = this.select.childNodes;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var o = _step.value;\n                            if (o.nodeName === \"OPTGROUP\") {\n                                var optgroup = o;\n                                var optgroupOptions = optgroup.childNodes;\n                                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                try {\n                                    for(var _iterator1 = optgroupOptions[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        var oo = _step1.value;\n                                        if (oo.nodeName === \"OPTION\") {\n                                            var option = oo;\n                                            option.selected = value.includes(option.value);\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                            }\n                            if (o.nodeName === \"OPTION\") {\n                                var option1 = o;\n                                option1.selected = value.includes(option1.value);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    this.changeListen(true);\n                }\n            },\n            {\n                key: \"updateSelect\",\n                value: function updateSelect(id, style, classes) {\n                    var _this = this;\n                    this.changeListen(false);\n                    if (id) this.select.dataset.id = id;\n                    if (style) this.select.style.cssText = style;\n                    if (classes) {\n                        this.select.className = \"\";\n                        classes.forEach(function(c) {\n                            if (c.trim() !== \"\") _this.select.classList.add(c.trim());\n                        });\n                    }\n                    this.changeListen(true);\n                }\n            },\n            {\n                key: \"updateOptions\",\n                value: function updateOptions(data) {\n                    this.changeListen(false);\n                    this.select.innerHTML = \"\";\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var d = _step.value;\n                            if (d instanceof Optgroup) this.select.appendChild(this.createOptgroup(d));\n                            if (d instanceof Option) this.select.appendChild(this.createOption(d));\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    this.select.dispatchEvent(new Event(\"change\"));\n                    this.changeListen(true);\n                }\n            },\n            {\n                key: \"createOptgroup\",\n                value: function createOptgroup(optgroup) {\n                    var optgroupEl = document.createElement(\"optgroup\");\n                    optgroupEl.id = optgroup.id;\n                    optgroupEl.label = optgroup.label;\n                    if (optgroup.selectAll) optgroupEl.dataset.selectAll = \"true\";\n                    if (optgroup.closable !== \"off\") optgroupEl.dataset.closable = optgroup.closable;\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    if (optgroup.options) try {\n                        for(var _iterator = optgroup.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var o = _step.value;\n                            optgroupEl.appendChild(this.createOption(o));\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return optgroupEl;\n                }\n            },\n            {\n                key: \"createOption\",\n                value: function createOption(info) {\n                    var optionEl = document.createElement(\"option\");\n                    optionEl.id = info.id;\n                    optionEl.value = info.value;\n                    optionEl.innerHTML = info.text;\n                    if (info.html !== \"\") optionEl.setAttribute(\"data-html\", info.html);\n                    if (info.selected) optionEl.selected = info.selected;\n                    if (info.disabled) optionEl.disabled = true;\n                    if (info.display === false) optionEl.style.display = \"none\";\n                    if (info.placeholder) optionEl.setAttribute(\"data-placeholder\", \"true\");\n                    if (info.mandatory) optionEl.setAttribute(\"data-mandatory\", \"true\");\n                    if (info.class) info.class.split(\" \").forEach(function(optionClass) {\n                        optionEl.classList.add(optionClass);\n                    });\n                    if (info.data && typeof info.data === \"object\") Object.keys(info.data).forEach(function(key) {\n                        optionEl.setAttribute(\"data-\" + kebabCase(key), info.data[key]);\n                    });\n                    return optionEl;\n                }\n            },\n            {\n                key: \"destroy\",\n                value: function destroy() {\n                    this.changeListen(false);\n                    this.select.removeEventListener(\"change\", this.valueChange.bind(this));\n                    if (this.observer) {\n                        this.observer.disconnect();\n                        this.observer = null;\n                    }\n                    delete this.select.dataset.id;\n                    this.showUI();\n                }\n            }\n        ]);\n        return Select;\n    }();\n    var SlimSelect = /*#__PURE__*/ function() {\n        function SlimSelect(config) {\n            var _this = this;\n            (0, $e3055412a69a0bec$export$2996f80ef42b8419)(this, SlimSelect);\n            var _a;\n            this.events = {\n                search: undefined,\n                searchFilter: function(opt, search) {\n                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n                },\n                addable: undefined,\n                beforeChange: undefined,\n                afterChange: undefined,\n                beforeOpen: undefined,\n                afterOpen: undefined,\n                beforeClose: undefined,\n                afterClose: undefined\n            };\n            this.windowResize = debounce(function() {\n                if (!_this.settings.isOpen && !_this.settings.isFullOpen) return;\n                _this.render.moveContent();\n            });\n            this.windowScroll = debounce(function() {\n                if (!_this.settings.isOpen && !_this.settings.isFullOpen) return;\n                _this.render.moveContent();\n            });\n            this.documentClick = function(e) {\n                if (!_this.settings.isOpen) return;\n                if (e.target && !hasClassInTree(e.target, _this.settings.id)) _this.close(e.type);\n            };\n            this.windowVisibilityChange = function() {\n                if (document.hidden) _this.close();\n            };\n            this.selectEl = typeof config.select === \"string\" ? document.querySelector(config.select) : config.select;\n            if (!this.selectEl) {\n                if (config.events && config.events.error) config.events.error(new Error(\"Could not find select element\"));\n                return;\n            }\n            if (this.selectEl.tagName !== \"SELECT\") {\n                if (config.events && config.events.error) config.events.error(new Error(\"Element isnt of type select\"));\n                return;\n            }\n            if (this.selectEl.dataset.ssid) this.destroy();\n            this.settings = new Settings(config.settings);\n            var debounceEvents = [\n                \"afterChange\",\n                \"beforeOpen\",\n                \"afterOpen\",\n                \"beforeClose\",\n                \"afterClose\"\n            ];\n            for(var key in config.events){\n                if (!config.events.hasOwnProperty(key)) continue;\n                if (debounceEvents.indexOf(key) !== -1) this.events[key] = debounce(config.events[key], 100);\n                else this.events[key] = config.events[key];\n            }\n            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n            this.settings.isMultiple = this.selectEl.multiple;\n            this.settings.style = this.selectEl.style.cssText;\n            this.settings.class = this.selectEl.className.split(\" \");\n            this.select = new Select(this.selectEl);\n            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n            this.select.hideUI();\n            this.select.onValueChange = function(values) {\n                _this.setSelected(values);\n            };\n            this.select.onClassChange = function(classes) {\n                _this.settings.class = classes;\n                _this.render.updateClassStyles();\n            };\n            this.select.onDisabledChange = function(disabled) {\n                if (disabled) _this.disable();\n                else _this.enable();\n            };\n            this.select.onOptionsChange = function(data) {\n                _this.setData(data);\n            };\n            this.store = new Store(this.settings.isMultiple ? \"multiple\" : \"single\", config.data ? config.data : this.select.getData());\n            if (config.data) this.select.updateOptions(this.store.getData());\n            var callbacks = {\n                open: this.open.bind(this),\n                close: this.close.bind(this),\n                addable: this.events.addable ? this.events.addable : undefined,\n                setSelected: this.setSelected.bind(this),\n                addOption: this.addOption.bind(this),\n                search: this.search.bind(this),\n                beforeChange: this.events.beforeChange,\n                afterChange: this.events.afterChange\n            };\n            this.render = new Render(this.settings, this.store, callbacks);\n            this.render.renderValues();\n            this.render.renderOptions(this.store.getData());\n            var selectAriaLabel = this.selectEl.getAttribute(\"aria-label\");\n            var selectAriaLabelledBy = this.selectEl.getAttribute(\"aria-labelledby\");\n            if (selectAriaLabel) this.render.main.main.setAttribute(\"aria-label\", selectAriaLabel);\n            else if (selectAriaLabelledBy) this.render.main.main.setAttribute(\"aria-labelledby\", selectAriaLabelledBy);\n            if (this.selectEl.parentNode) this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n            document.addEventListener(\"click\", this.documentClick);\n            window.addEventListener(\"resize\", this.windowResize, false);\n            if (this.settings.openPosition === \"auto\") window.addEventListener(\"scroll\", this.windowScroll, false);\n            document.addEventListener(\"visibilitychange\", this.windowVisibilityChange);\n            if (this.settings.disabled) this.disable();\n            if (this.settings.alwaysOpen) this.open();\n            this.selectEl.slim = this;\n        }\n        (0, $89767be5ae191d10$export$d60067ff2358eee8)(SlimSelect, [\n            {\n                key: \"enable\",\n                value: function enable() {\n                    this.settings.disabled = false;\n                    this.select.enable();\n                    this.render.enable();\n                }\n            },\n            {\n                key: \"disable\",\n                value: function disable() {\n                    this.settings.disabled = true;\n                    this.select.disable();\n                    this.render.disable();\n                }\n            },\n            {\n                key: \"getData\",\n                value: function getData() {\n                    return this.store.getData();\n                }\n            },\n            {\n                key: \"setData\",\n                value: function setData(data) {\n                    var selected = this.store.getSelected();\n                    var err = this.store.validateDataArray(data);\n                    if (err) {\n                        if (this.events.error) this.events.error(err);\n                        return;\n                    }\n                    this.store.setData(data);\n                    var dataClean = this.store.getData();\n                    this.select.updateOptions(dataClean);\n                    this.render.renderValues();\n                    this.render.renderOptions(dataClean);\n                    if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n                }\n            },\n            {\n                key: \"getSelected\",\n                value: function getSelected() {\n                    return this.store.getSelected();\n                }\n            },\n            {\n                key: \"setSelected\",\n                value: function setSelected(value) {\n                    var runAfterChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n                    var selected = this.store.getSelected();\n                    this.store.setSelectedBy(\"value\", Array.isArray(value) ? value : [\n                        value\n                    ]);\n                    var data = this.store.getData();\n                    this.select.updateOptions(data);\n                    this.render.renderValues();\n                    if (this.render.content.search.input.value !== \"\") this.search(this.render.content.search.input.value);\n                    else this.render.renderOptions(data);\n                    if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n                }\n            },\n            {\n                key: \"addOption\",\n                value: function addOption(option) {\n                    var selected = this.store.getSelected();\n                    if (!this.store.getDataOptions().some(function(o) {\n                        var _a;\n                        return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text);\n                    })) this.store.addOption(option);\n                    var data = this.store.getData();\n                    this.select.updateOptions(data);\n                    this.render.renderValues();\n                    this.render.renderOptions(data);\n                    if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n                }\n            },\n            {\n                key: \"open\",\n                value: function open() {\n                    var _this = this;\n                    if (this.settings.disabled || this.settings.isOpen) return;\n                    if (this.events.beforeOpen) this.events.beforeOpen();\n                    this.render.open();\n                    if (this.settings.showSearch) this.render.searchFocus();\n                    this.settings.isOpen = true;\n                    setTimeout(function() {\n                        if (_this.events.afterOpen) _this.events.afterOpen();\n                        if (_this.settings.isOpen) _this.settings.isFullOpen = true;\n                    }, this.settings.timeoutDelay);\n                    if (this.settings.contentPosition === \"absolute\") {\n                        if (this.settings.intervalMove) clearInterval(this.settings.intervalMove);\n                        this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n                    }\n                }\n            },\n            {\n                key: \"close\",\n                value: function close() {\n                    var eventType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n                    var _this = this;\n                    if (!this.settings.isOpen || this.settings.alwaysOpen) return;\n                    if (this.events.beforeClose) this.events.beforeClose();\n                    this.render.close();\n                    if (this.render.content.search.input.value !== \"\") this.search(\"\");\n                    this.render.mainFocus(eventType);\n                    this.settings.isOpen = false;\n                    this.settings.isFullOpen = false;\n                    setTimeout(function() {\n                        if (_this.events.afterClose) _this.events.afterClose();\n                    }, this.settings.timeoutDelay);\n                    if (this.settings.intervalMove) clearInterval(this.settings.intervalMove);\n                }\n            },\n            {\n                key: \"search\",\n                value: function search(value) {\n                    var _this = this;\n                    if (this.render.content.search.input.value !== value) this.render.content.search.input.value = value;\n                    if (!this.events.search) {\n                        this.render.renderOptions(value === \"\" ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n                        return;\n                    }\n                    this.render.renderSearching();\n                    var searchResp = this.events.search(value, this.store.getSelectedOptions());\n                    if (searchResp instanceof Promise) {\n                        searchResp.then(function(data) {\n                            _this.render.renderOptions(_this.store.partialToFullData(data));\n                        }).catch(function(err) {\n                            _this.render.renderError(typeof err === \"string\" ? err : err.message);\n                        });\n                        return;\n                    } else if (Array.isArray(searchResp)) this.render.renderOptions(this.store.partialToFullData(searchResp));\n                    else this.render.renderError(\"Search event must return a promise or an array of data\");\n                }\n            },\n            {\n                key: \"destroy\",\n                value: function destroy() {\n                    document.removeEventListener(\"click\", this.documentClick);\n                    window.removeEventListener(\"resize\", this.windowResize, false);\n                    if (this.settings.openPosition === \"auto\") window.removeEventListener(\"scroll\", this.windowScroll, false);\n                    document.removeEventListener(\"visibilitychange\", this.windowVisibilityChange);\n                    this.store.setData([]);\n                    this.render.destroy();\n                    this.select.destroy();\n                }\n            }\n        ]);\n        return SlimSelect;\n    }();\n    return SlimSelect;\n});\n\n\n// new SlimSelect({\n// select: '#selectElement'\n// })\nvar $b8f9b7833fa37166$var$catInfo = document.querySelector(\".cat-info\");\nvar $b8f9b7833fa37166$var$select = document.querySelector(\".breed-select\");\nfunction $b8f9b7833fa37166$var$getBreeds(data) {\n    (0, $ae0c329fb0fb36dc$export$913382e0b15b5503)(data).then(function(data) {\n        return data;\n    });\n}\n$b8f9b7833fa37166$var$getBreeds(\"objects\");\n$b8f9b7833fa37166$var$select.addEventListener(\"change\", $b8f9b7833fa37166$var$onSelected);\nfunction $b8f9b7833fa37166$var$onSelected(e) {\n    var breedId = e.target.value;\n    (0, $ae0c329fb0fb36dc$export$57b7d3a597416aa2)(breedId).then(function(data) {\n        console.log(data);\n        var markupCats = data.map(function(param) {\n            var name = param.name, description = param.description, reference_image_id = param.reference_image_id, temperament = param.temperament;\n            return \"<li><h1>\".concat(name, \"</h1><img src=\").concat(reference_image_id, \" alt='\").concat(name, \"' width='200'><p>\").concat(temperament, \"</p><p>\").concat(description, \"</p></li>\");\n        }).join(\"\");\n        $b8f9b7833fa37166$var$catInfo.insertAdjacentHTML(\"beforeend\", markupCats);\n    });\n}\nfunction $b8f9b7833fa37166$var$updateSelect(data) {\n    (0, $ae0c329fb0fb36dc$export$913382e0b15b5503)(data).then(function(data) {\n        console.log(data);\n        var markupBreeds = data.map(function(param) {\n            var name = param.name, id = param.id;\n            return \"<li><option value ='\".concat(id, \"'>\").concat(name, \"</option></li>\");\n        }).join(\"\");\n        $b8f9b7833fa37166$var$select.insertAdjacentHTML(\"beforeend\", markupBreeds);\n    });\n}\n$b8f9b7833fa37166$var$updateSelect(\"markup\");\n\n})();\n//# sourceMappingURL=index.ab0c387a.js.map\n","import {fetchCatByBreed} from './cat-api.js'\nimport {fetchBreeds} from './cat-api.js'\nimport SlimSelect from 'slim-select'\n\n// new SlimSelect({\n// select: '#selectElement'\n// })\n\nconst catInfo = document.querySelector('.cat-info');\nconst select = document.querySelector('.breed-select');\n\nfunction getBreeds(data) {\n    fetchBreeds(data).then(data => data);\n};\ngetBreeds('objects');\n\nselect.addEventListener(\"change\", onSelected);\n\nfunction onSelected(e) {\n    let breedId = e.target.value;\n\n    fetchCatByBreed(breedId).then((data) => {\n        console.log(data)\n        const markupCats = data\n        .map(({ name, description, reference_image_id, temperament}) => {\n            return `<li><h1>${name}</h1><img src=${reference_image_id} alt='${name}' width='200'><p>${temperament}</p><p>${description}</p></li>`;\n        }).join('');\n    catInfo.insertAdjacentHTML('beforeend', markupCats);\n  });\n};\n\nfunction updateSelect(data) {\n    fetchBreeds(data).then(data => {\n        console.log(data)\n        const markupBreeds = data.map(({ name, id }) => {\n            return `<li><option value ='${id}'>${name}</option></li>`;\n        }).join('');\n    select.insertAdjacentHTML('beforeend', markupBreeds);\n  });\n};\nupdateSelect('markup');","const BASE_URL = 'https://api.thecatapi.com/v1/breeds';\nconst API = \"live_XTVqmtwZCRUux0xyyuBoz9aUlTLhAmYM8XZI7lwTTnN9wNP285Bwa4shn7cLcow8\";\nconst CAT_SEARCH = 'https://api.thecatapi.com/v1/images';\n\nexport function fetchBreeds(keyword){\n      const params = new URLSearchParams({\n          apikey: API,\n          keyword\n    });\n    return fetch(`${BASE_URL}?${params}`)\n        .then((r) =>\n        { \n            if (!r.ok) {\n            throw new error(r.status)\n        }\n            return r.json\n        })\n    .catch((error) => console.log(error));\n};\n\nexport function fetchCatByBreed(breedId) {\n    return fetch(`${CAT_SEARCH}?breed_ids=${breedId}&apikey=${API}`)\n        .then((r) =>\n        { \n            if (!r.ok) {\n            throw new error(r.status)\n        }\n            return r.json\n        })\n    .catch((error) => console.log(error));\n};","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.SlimSelect = factory());\n})(this, (function () { 'use strict';\n\n    function generateID() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n    function hasClassInTree(element, className) {\n        function hasClass(e, c) {\n            if (c && e && e.classList && e.classList.contains(c)) {\n                return e;\n            }\n            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {\n                return e;\n            }\n            return null;\n        }\n        function parentByClass(e, c) {\n            if (!e || e === document) {\n                return null;\n            }\n            else if (hasClass(e, c)) {\n                return e;\n            }\n            else {\n                return parentByClass(e.parentNode, c);\n            }\n        }\n        return hasClass(element, className) || parentByClass(element, className);\n    }\n    function debounce(func, wait = 50, immediate = false) {\n        let timeout;\n        return function (...args) {\n            const context = self;\n            const later = () => {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            };\n            const callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) {\n                func.apply(context, args);\n            }\n        };\n    }\n    function isEqual(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    function kebabCase(str) {\n        const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match) => '-' + match.toLowerCase());\n        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n    }\n\n    class Settings {\n        constructor(settings) {\n            this.id = '';\n            this.style = '';\n            this.class = [];\n            this.isMultiple = false;\n            this.isOpen = false;\n            this.isFullOpen = false;\n            this.intervalMove = null;\n            if (!settings) {\n                settings = {};\n            }\n            this.id = 'ss-' + generateID();\n            this.style = settings.style || '';\n            this.class = settings.class || [];\n            this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n            this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n            this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n            this.searchPlaceholder = settings.searchPlaceholder || 'Search';\n            this.searchText = settings.searchText || 'No Results';\n            this.searchingText = settings.searchingText || 'Searching...';\n            this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n            this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n            this.contentLocation = settings.contentLocation || document.body;\n            this.contentPosition = settings.contentPosition || 'absolute';\n            this.openPosition = settings.openPosition || 'auto';\n            this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value';\n            this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n            this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n            this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n            this.minSelected = settings.minSelected || 0;\n            this.maxSelected = settings.maxSelected || 1000;\n            this.timeoutDelay = settings.timeoutDelay || 200;\n            this.maxValuesShown = settings.maxValuesShown || 20;\n            this.maxValuesMessage = settings.maxValuesMessage || '{number} selected';\n        }\n    }\n\n    class Optgroup {\n        constructor(optgroup) {\n            this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id;\n            this.label = optgroup.label || '';\n            this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n            this.closable = optgroup.closable || 'off';\n            this.options = [];\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    this.options.push(new Option(o));\n                }\n            }\n        }\n    }\n    class Option {\n        constructor(option) {\n            this.id = !option.id || option.id === '' ? generateID() : option.id;\n            this.value = option.value === undefined ? option.text : option.value;\n            this.text = option.text || '';\n            this.html = option.html || '';\n            this.selected = option.selected !== undefined ? option.selected : false;\n            this.display = option.display !== undefined ? option.display : true;\n            this.disabled = option.disabled !== undefined ? option.disabled : false;\n            this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n            this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n            this.class = option.class || '';\n            this.style = option.style || '';\n            this.data = option.data || {};\n        }\n    }\n    class Store {\n        constructor(type, data) {\n            this.selectType = 'single';\n            this.data = [];\n            this.selectType = type;\n            this.setData(data);\n        }\n        validateDataArray(data) {\n            if (!Array.isArray(data)) {\n                return new Error('Data must be an array');\n            }\n            for (let dataObj of data) {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    if (!('label' in dataObj)) {\n                        return new Error('Optgroup must have a label');\n                    }\n                    if ('options' in dataObj && dataObj.options) {\n                        for (let option of dataObj.options) {\n                            return this.validateOption(option);\n                        }\n                    }\n                }\n                else if (dataObj instanceof Option || 'text' in dataObj) {\n                    return this.validateOption(dataObj);\n                }\n                else {\n                    return new Error('Data object must be a valid optgroup or option');\n                }\n            }\n            return null;\n        }\n        validateOption(option) {\n            if (!('text' in option)) {\n                return new Error('Option must have a text');\n            }\n            return null;\n        }\n        partialToFullData(data) {\n            let dataFinal = [];\n            data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    let optOptions = [];\n                    if ('options' in dataObj && dataObj.options) {\n                        dataObj.options.forEach((option) => {\n                            optOptions.push(new Option(option));\n                        });\n                    }\n                    if (optOptions.length > 0) {\n                        dataFinal.push(new Optgroup(dataObj));\n                    }\n                }\n                if (dataObj instanceof Option || 'text' in dataObj) {\n                    dataFinal.push(new Option(dataObj));\n                }\n            });\n            return dataFinal;\n        }\n        setData(data) {\n            this.data = this.partialToFullData(data);\n            if (this.selectType === 'single') {\n                this.setSelectedBy('value', this.getSelected());\n            }\n        }\n        getData() {\n            return this.filter(null, true);\n        }\n        getDataOptions() {\n            return this.filter(null, false);\n        }\n        addOption(option) {\n            this.setData(this.getData().concat(new Option(option)));\n        }\n        setSelectedBy(selectedType, selectedValues) {\n            let firstOption = null;\n            let hasSelected = false;\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup) {\n                    for (let option of dataObj.options) {\n                        if (!firstOption) {\n                            firstOption = option;\n                        }\n                        option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                        if (option.selected && this.selectType === 'single') {\n                            hasSelected = true;\n                        }\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!firstOption) {\n                        firstOption = dataObj;\n                    }\n                    dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                    if (dataObj.selected && this.selectType === 'single') {\n                        hasSelected = true;\n                    }\n                }\n            }\n            if (this.selectType === 'single' && firstOption && !hasSelected) {\n                firstOption.selected = true;\n            }\n        }\n        getSelected() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedValues = [];\n            selectedOptions.forEach((option) => {\n                selectedValues.push(option.value);\n            });\n            return selectedValues;\n        }\n        getSelectedOptions() {\n            return this.filter((opt) => {\n                return opt.selected;\n            }, false);\n        }\n        getSelectedIDs() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedIDs = [];\n            selectedOptions.forEach((op) => {\n                selectedIDs.push(op.id);\n            });\n            return selectedIDs;\n        }\n        getOptgroupByID(id) {\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup && dataObj.id === id) {\n                    return dataObj;\n                }\n            }\n            return null;\n        }\n        getOptionByID(id) {\n            let options = this.filter((opt) => {\n                return opt.id === id;\n            }, false);\n            return options.length ? options[0] : null;\n        }\n        search(search, searchFilter) {\n            search = search.trim();\n            if (search === '') {\n                return this.getData();\n            }\n            return this.filter((opt) => {\n                return searchFilter(opt, search);\n            }, true);\n        }\n        filter(filter, includeOptgroup) {\n            const dataSearch = [];\n            this.data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup) {\n                    let optOptions = [];\n                    dataObj.options.forEach((option) => {\n                        if (!filter || filter(option)) {\n                            if (!includeOptgroup) {\n                                dataSearch.push(new Option(option));\n                            }\n                            else {\n                                optOptions.push(new Option(option));\n                            }\n                        }\n                    });\n                    if (optOptions.length > 0) {\n                        let optgroup = new Optgroup(dataObj);\n                        optgroup.options = optOptions;\n                        dataSearch.push(optgroup);\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!filter || filter(dataObj)) {\n                        dataSearch.push(new Option(dataObj));\n                    }\n                }\n            });\n            return dataSearch;\n        }\n        getSelectType() {\n            return this.selectType;\n        }\n    }\n\n    class Render {\n        constructor(settings, store, callbacks) {\n            this.classes = {\n                main: 'ss-main',\n                placeholder: 'ss-placeholder',\n                values: 'ss-values',\n                single: 'ss-single',\n                max: 'ss-max',\n                value: 'ss-value',\n                valueText: 'ss-value-text',\n                valueDelete: 'ss-value-delete',\n                valueOut: 'ss-value-out',\n                deselect: 'ss-deselect',\n                deselectPath: 'M10,10 L90,90 M10,90 L90,10',\n                arrow: 'ss-arrow',\n                arrowClose: 'M10,30 L50,70 L90,30',\n                arrowOpen: 'M10,70 L50,30 L90,70',\n                content: 'ss-content',\n                openAbove: 'ss-open-above',\n                openBelow: 'ss-open-below',\n                search: 'ss-search',\n                searchHighlighter: 'ss-search-highlight',\n                searching: 'ss-searching',\n                addable: 'ss-addable',\n                addablePath: 'M50,10 L50,90 M10,50 L90,50',\n                list: 'ss-list',\n                optgroup: 'ss-optgroup',\n                optgroupLabel: 'ss-optgroup-label',\n                optgroupLabelText: 'ss-optgroup-label-text',\n                optgroupActions: 'ss-optgroup-actions',\n                optgroupSelectAll: 'ss-selectall',\n                optgroupSelectAllBox: 'M60,10 L10,10 L10,90 L90,90 L90,50',\n                optgroupSelectAllCheck: 'M30,45 L50,70 L90,10',\n                optgroupClosable: 'ss-closable',\n                option: 'ss-option',\n                optionDelete: 'M10,10 L90,90 M10,90 L90,10',\n                highlighted: 'ss-highlighted',\n                open: 'ss-open',\n                close: 'ss-close',\n                selected: 'ss-selected',\n                error: 'ss-error',\n                disabled: 'ss-disabled',\n                hide: 'ss-hide',\n            };\n            this.store = store;\n            this.settings = settings;\n            this.callbacks = callbacks;\n            this.main = this.mainDiv();\n            this.content = this.contentDiv();\n            this.updateClassStyles();\n            this.updateAriaAttributes();\n            this.settings.contentLocation.appendChild(this.content.main);\n        }\n        enable() {\n            this.main.main.classList.remove(this.classes.disabled);\n            this.content.search.input.disabled = false;\n        }\n        disable() {\n            this.main.main.classList.add(this.classes.disabled);\n            this.content.search.input.disabled = true;\n        }\n        open() {\n            this.main.arrow.path.setAttribute('d', this.classes.arrowOpen);\n            this.main.main.classList.add(this.settings.openPosition === 'up' ? this.classes.openAbove : this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'true');\n            this.moveContent();\n            const selectedOptions = this.store.getSelectedOptions();\n            if (selectedOptions.length) {\n                const selectedId = selectedOptions[selectedOptions.length - 1].id;\n                const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n                if (selectedOption) {\n                    this.ensureElementInView(this.content.list, selectedOption);\n                }\n            }\n        }\n        close() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.main.arrow.path.setAttribute('d', this.classes.arrowClose);\n        }\n        updateClassStyles() {\n            this.main.main.className = '';\n            this.main.main.removeAttribute('style');\n            this.content.main.className = '';\n            this.content.main.removeAttribute('style');\n            this.main.main.classList.add(this.classes.main);\n            this.content.main.classList.add(this.classes.content);\n            if (this.settings.style !== '') {\n                this.main.main.style.cssText = this.settings.style;\n                this.content.main.style.cssText = this.settings.style;\n            }\n            if (this.settings.class.length) {\n                for (const c of this.settings.class) {\n                    if (c.trim() !== '') {\n                        this.main.main.classList.add(c.trim());\n                        this.content.main.classList.add(c.trim());\n                    }\n                }\n            }\n            if (this.settings.contentPosition === 'relative') {\n                this.content.main.classList.add('ss-' + this.settings.contentPosition);\n            }\n        }\n        updateAriaAttributes() {\n            this.main.main.role = 'combobox';\n            this.main.main.setAttribute('aria-haspopup', 'listbox');\n            this.main.main.setAttribute('aria-controls', this.content.main.id);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.setAttribute('role', 'listbox');\n        }\n        mainDiv() {\n            var _a;\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            main.id = this.settings.id;\n            main.tabIndex = 0;\n            main.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        this.callbacks.open();\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Enter':\n                    case ' ':\n                        this.callbacks.open();\n                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                        if (highlighted) {\n                            highlighted.click();\n                        }\n                        return false;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                }\n            };\n            main.onclick = (e) => {\n                if (this.settings.disabled) {\n                    return;\n                }\n                this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();\n            };\n            const values = document.createElement('div');\n            values.classList.add(this.classes.values);\n            main.appendChild(values);\n            const deselect = document.createElement('div');\n            deselect.classList.add(this.classes.deselect);\n            const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n            if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {\n                deselect.classList.add(this.classes.hide);\n            }\n            else {\n                deselect.classList.remove(this.classes.hide);\n            }\n            deselect.onclick = (e) => {\n                e.stopPropagation();\n                if (this.settings.disabled) {\n                    return;\n                }\n                let shouldDelete = true;\n                const before = this.store.getSelectedOptions();\n                const after = [];\n                if (this.callbacks.beforeChange) {\n                    shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                }\n                if (shouldDelete) {\n                    if (this.settings.isMultiple) {\n                        this.callbacks.setSelected([], false);\n                        this.updateDeselectAll();\n                    }\n                    else {\n                        this.callbacks.setSelected([''], false);\n                    }\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(after);\n                    }\n                }\n            };\n            const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            deselectSvg.setAttribute('viewBox', '0 0 100 100');\n            const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            deselectPath.setAttribute('d', this.classes.deselectPath);\n            deselectSvg.appendChild(deselectPath);\n            deselect.appendChild(deselectSvg);\n            main.appendChild(deselect);\n            const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            arrow.classList.add(this.classes.arrow);\n            arrow.setAttribute('viewBox', '0 0 100 100');\n            const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            arrowPath.setAttribute('d', this.classes.arrowClose);\n            if (this.settings.alwaysOpen) {\n                arrow.classList.add(this.classes.hide);\n            }\n            arrow.appendChild(arrowPath);\n            main.appendChild(arrow);\n            return {\n                main: main,\n                values: values,\n                deselect: {\n                    main: deselect,\n                    svg: deselectSvg,\n                    path: deselectPath,\n                },\n                arrow: {\n                    main: arrow,\n                    path: arrowPath,\n                },\n            };\n        }\n        mainFocus(eventType) {\n            if (eventType !== 'click') {\n                this.main.main.focus({ preventScroll: true });\n            }\n        }\n        placeholder() {\n            const placeholderOption = this.store.filter((o) => o.placeholder, false);\n            let placeholderText = this.settings.placeholderText;\n            if (placeholderOption.length) {\n                if (placeholderOption[0].html !== '') {\n                    placeholderText = placeholderOption[0].html;\n                }\n                else if (placeholderOption[0].text !== '') {\n                    placeholderText = placeholderOption[0].text;\n                }\n            }\n            const placeholder = document.createElement('div');\n            placeholder.classList.add(this.classes.placeholder);\n            placeholder.innerHTML = placeholderText;\n            return placeholder;\n        }\n        renderValues() {\n            if (!this.settings.isMultiple) {\n                this.renderSingleValue();\n                return;\n            }\n            this.renderMultipleValues();\n        }\n        renderSingleValue() {\n            const selected = this.store.filter((o) => {\n                return o.selected && !o.placeholder;\n            }, false);\n            const selectedSingle = selected.length > 0 ? selected[0] : null;\n            if (!selectedSingle) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n            }\n            else {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.single);\n                if (selectedSingle.html) {\n                    singleValue.innerHTML = selectedSingle.html;\n                }\n                else {\n                    singleValue.innerText = selectedSingle.text;\n                }\n                this.main.values.innerHTML = singleValue.outerHTML;\n            }\n            if (!this.settings.allowDeselect || !selected.length) {\n                this.main.deselect.main.classList.add(this.classes.hide);\n            }\n            else {\n                this.main.deselect.main.classList.remove(this.classes.hide);\n            }\n        }\n        renderMultipleValues() {\n            let currentNodes = this.main.values.childNodes;\n            let selectedOptions = this.store.filter((opt) => {\n                return opt.selected && opt.display;\n            }, false);\n            if (selectedOptions.length === 0) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n                return;\n            }\n            else {\n                const placeholder = this.main.values.querySelector('.' + this.classes.placeholder);\n                if (placeholder) {\n                    placeholder.remove();\n                }\n            }\n            if (selectedOptions.length > this.settings.maxValuesShown) {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.max);\n                singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString());\n                this.main.values.innerHTML = singleValue.outerHTML;\n                return;\n            }\n            else {\n                const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max);\n                if (maxValuesMessage) {\n                    maxValuesMessage.remove();\n                }\n            }\n            let removeNodes = [];\n            for (let i = 0; i < currentNodes.length; i++) {\n                const node = currentNodes[i];\n                const id = node.getAttribute('data-id');\n                if (id) {\n                    const found = selectedOptions.filter((opt) => {\n                        return opt.id === id;\n                    }, false);\n                    if (!found.length) {\n                        removeNodes.push(node);\n                    }\n                }\n            }\n            for (const n of removeNodes) {\n                n.classList.add(this.classes.valueOut);\n                setTimeout(() => {\n                    if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {\n                        this.main.values.removeChild(n);\n                    }\n                }, 100);\n            }\n            currentNodes = this.main.values.childNodes;\n            for (let d = 0; d < selectedOptions.length; d++) {\n                let shouldAdd = true;\n                for (let i = 0; i < currentNodes.length; i++) {\n                    if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {\n                        shouldAdd = false;\n                    }\n                }\n                if (shouldAdd) {\n                    if (currentNodes.length === 0) {\n                        this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                    }\n                    else if (d === 0) {\n                        this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                    }\n                    else {\n                        currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]));\n                    }\n                }\n            }\n            this.updateDeselectAll();\n        }\n        multipleValue(option) {\n            const value = document.createElement('div');\n            value.classList.add(this.classes.value);\n            value.dataset.id = option.id;\n            const text = document.createElement('div');\n            text.classList.add(this.classes.valueText);\n            text.innerText = option.text;\n            value.appendChild(text);\n            if (!option.mandatory) {\n                const deleteDiv = document.createElement('div');\n                deleteDiv.classList.add(this.classes.valueDelete);\n                deleteDiv.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.settings.disabled) {\n                        return;\n                    }\n                    let shouldDelete = true;\n                    const before = this.store.getSelectedOptions();\n                    const after = before.filter((o) => {\n                        return o.selected && o.id !== option.id;\n                    }, true);\n                    if (this.settings.minSelected && after.length < this.settings.minSelected) {\n                        return;\n                    }\n                    if (this.callbacks.beforeChange) {\n                        shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                    }\n                    if (shouldDelete) {\n                        let selectedValues = [];\n                        for (const o of after) {\n                            if (o instanceof Optgroup) {\n                                for (const c of o.options) {\n                                    selectedValues.push(c.value);\n                                }\n                            }\n                            if (o instanceof Option) {\n                                selectedValues.push(o.value);\n                            }\n                        }\n                        this.callbacks.setSelected(selectedValues, false);\n                        if (this.settings.closeOnSelect) {\n                            this.callbacks.close();\n                        }\n                        if (this.callbacks.afterChange) {\n                            this.callbacks.afterChange(after);\n                        }\n                        this.updateDeselectAll();\n                    }\n                };\n                const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                deleteSvg.setAttribute('viewBox', '0 0 100 100');\n                const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                deletePath.setAttribute('d', this.classes.optionDelete);\n                deleteSvg.appendChild(deletePath);\n                deleteDiv.appendChild(deleteSvg);\n                value.appendChild(deleteDiv);\n            }\n            return value;\n        }\n        contentDiv() {\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            main.id = this.settings.id;\n            const search = this.searchDiv();\n            main.appendChild(search.main);\n            const list = this.listDiv();\n            main.appendChild(list);\n            return {\n                main: main,\n                search: search,\n                list: list,\n            };\n        }\n        moveContent() {\n            if (this.settings.contentPosition === 'relative') {\n                this.moveContentBelow();\n                return;\n            }\n            if (this.settings.openPosition === 'down') {\n                this.moveContentBelow();\n                return;\n            }\n            else if (this.settings.openPosition === 'up') {\n                this.moveContentAbove();\n                return;\n            }\n            if (this.putContent() === 'up') {\n                this.moveContentAbove();\n            }\n            else {\n                this.moveContentBelow();\n            }\n        }\n        searchDiv() {\n            const main = document.createElement('div');\n            const input = document.createElement('input');\n            const addable = document.createElement('div');\n            main.classList.add(this.classes.search);\n            const searchReturn = {\n                main,\n                input,\n            };\n            if (!this.settings.showSearch) {\n                main.classList.add(this.classes.hide);\n                input.readOnly = true;\n            }\n            input.type = 'search';\n            input.placeholder = this.settings.searchPlaceholder;\n            input.tabIndex = -1;\n            input.setAttribute('aria-label', this.settings.searchPlaceholder);\n            input.setAttribute('autocapitalize', 'off');\n            input.setAttribute('autocomplete', 'off');\n            input.setAttribute('autocorrect', 'off');\n            input.oninput = debounce((e) => {\n                this.callbacks.search(e.target.value);\n            }, 100);\n            input.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                    case 'Enter':\n                    case ' ':\n                        if (this.callbacks.addable && e.ctrlKey) {\n                            addable.click();\n                            return false;\n                        }\n                        else {\n                            const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                            if (highlighted) {\n                                highlighted.click();\n                                return false;\n                            }\n                        }\n                        return true;\n                }\n            };\n            main.appendChild(input);\n            if (this.callbacks.addable) {\n                addable.classList.add(this.classes.addable);\n                const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                plus.setAttribute('viewBox', '0 0 100 100');\n                const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                plusPath.setAttribute('d', this.classes.addablePath);\n                plus.appendChild(plusPath);\n                addable.appendChild(plus);\n                addable.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (!this.callbacks.addable) {\n                        return;\n                    }\n                    const inputValue = this.content.search.input.value.trim();\n                    if (inputValue === '') {\n                        this.content.search.input.focus();\n                        return;\n                    }\n                    const runFinish = (oo) => {\n                        let newOption = new Option(oo);\n                        this.callbacks.addOption(newOption);\n                        if (this.settings.isMultiple) {\n                            let values = this.store.getSelected();\n                            values.push(newOption.value);\n                            this.callbacks.setSelected(values, true);\n                        }\n                        else {\n                            this.callbacks.setSelected([newOption.value], true);\n                        }\n                        this.callbacks.search('');\n                        if (this.settings.closeOnSelect) {\n                            setTimeout(() => {\n                                this.callbacks.close();\n                            }, 100);\n                        }\n                    };\n                    const addableValue = this.callbacks.addable(inputValue);\n                    if (addableValue === false || addableValue === undefined || addableValue === null) {\n                        return;\n                    }\n                    if (addableValue instanceof Promise) {\n                        addableValue.then((value) => {\n                            if (typeof value === 'string') {\n                                runFinish({\n                                    text: value,\n                                    value: value,\n                                });\n                            }\n                            else {\n                                runFinish(value);\n                            }\n                        });\n                    }\n                    else if (typeof addableValue === 'string') {\n                        runFinish({\n                            text: addableValue,\n                            value: addableValue,\n                        });\n                    }\n                    else {\n                        runFinish(addableValue);\n                    }\n                    return;\n                };\n                main.appendChild(addable);\n                searchReturn.addable = {\n                    main: addable,\n                    svg: plus,\n                    path: plusPath,\n                };\n            }\n            return searchReturn;\n        }\n        searchFocus() {\n            this.content.search.input.focus();\n        }\n        getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {\n            let query = '.' + this.classes.option;\n            if (notPlaceholder) {\n                query += ':not(.' + this.classes.placeholder + ')';\n            }\n            if (notDisabled) {\n                query += ':not(.' + this.classes.disabled + ')';\n            }\n            if (notHidden) {\n                query += ':not(.' + this.classes.hide + ')';\n            }\n            return Array.from(this.content.list.querySelectorAll(query));\n        }\n        highlight(dir) {\n            const options = this.getOptions(true, true, true);\n            if (options.length === 0) {\n                return;\n            }\n            if (options.length === 1) {\n                if (!options[0].classList.contains(this.classes.highlighted)) {\n                    options[0].classList.add(this.classes.highlighted);\n                    return;\n                }\n            }\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].classList.contains(this.classes.highlighted)) {\n                    const prevOption = options[i];\n                    prevOption.classList.remove(this.classes.highlighted);\n                    const prevParent = prevOption.parentElement;\n                    if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                        const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    let selectOption = options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1];\n                    selectOption.classList.add(this.classes.highlighted);\n                    this.ensureElementInView(this.content.list, selectOption);\n                    const selectParent = selectOption.parentElement;\n                    if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                        const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    return;\n                }\n            }\n            options[dir === 'down' ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n            this.ensureElementInView(this.content.list, options[dir === 'down' ? 0 : options.length - 1]);\n        }\n        listDiv() {\n            const options = document.createElement('div');\n            options.classList.add(this.classes.list);\n            return options;\n        }\n        renderError(error) {\n            this.content.list.innerHTML = '';\n            const errorDiv = document.createElement('div');\n            errorDiv.classList.add(this.classes.error);\n            errorDiv.textContent = error;\n            this.content.list.appendChild(errorDiv);\n        }\n        renderSearching() {\n            this.content.list.innerHTML = '';\n            const searchingDiv = document.createElement('div');\n            searchingDiv.classList.add(this.classes.searching);\n            searchingDiv.textContent = this.settings.searchingText;\n            this.content.list.appendChild(searchingDiv);\n        }\n        renderOptions(data) {\n            this.content.list.innerHTML = '';\n            if (data.length === 0) {\n                const noResults = document.createElement('div');\n                noResults.classList.add(this.classes.search);\n                noResults.innerHTML = this.settings.searchText;\n                this.content.list.appendChild(noResults);\n                return;\n            }\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    const optgroupEl = document.createElement('div');\n                    optgroupEl.classList.add(this.classes.optgroup);\n                    const optgroupLabel = document.createElement('div');\n                    optgroupLabel.classList.add(this.classes.optgroupLabel);\n                    optgroupEl.appendChild(optgroupLabel);\n                    const optgroupLabelText = document.createElement('div');\n                    optgroupLabelText.classList.add(this.classes.optgroupLabelText);\n                    optgroupLabelText.textContent = d.label;\n                    optgroupLabel.appendChild(optgroupLabelText);\n                    const optgroupActions = document.createElement('div');\n                    optgroupActions.classList.add(this.classes.optgroupActions);\n                    optgroupLabel.appendChild(optgroupActions);\n                    if (this.settings.isMultiple && d.selectAll) {\n                        const selectAll = document.createElement('div');\n                        selectAll.classList.add(this.classes.optgroupSelectAll);\n                        let allSelected = true;\n                        for (const o of d.options) {\n                            if (!o.selected) {\n                                allSelected = false;\n                                break;\n                            }\n                        }\n                        if (allSelected) {\n                            selectAll.classList.add(this.classes.selected);\n                        }\n                        const selectAllText = document.createElement('span');\n                        selectAllText.textContent = 'Select All';\n                        selectAll.appendChild(selectAllText);\n                        const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        selectAllSvg.setAttribute('viewBox', '0 0 100 100');\n                        selectAll.appendChild(selectAllSvg);\n                        const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox);\n                        selectAllSvg.appendChild(selectAllBox);\n                        const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck);\n                        selectAllSvg.appendChild(selectAllCheck);\n                        selectAll.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            const currentSelected = this.store.getSelected();\n                            if (allSelected) {\n                                const newSelected = currentSelected.filter((s) => {\n                                    for (const o of d.options) {\n                                        if (s === o.value) {\n                                            return false;\n                                        }\n                                    }\n                                    return true;\n                                });\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                            else {\n                                const newSelected = currentSelected.concat(d.options.map((o) => o.value));\n                                this.callbacks.setSelected(newSelected, true);\n                            }\n                        });\n                        optgroupActions.appendChild(selectAll);\n                    }\n                    if (d.closable !== 'off') {\n                        const optgroupClosable = document.createElement('div');\n                        optgroupClosable.classList.add(this.classes.optgroupClosable);\n                        const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100');\n                        optgroupClosableSvg.classList.add(this.classes.arrow);\n                        optgroupClosable.appendChild(optgroupClosableSvg);\n                        const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                        if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {\n                            optgroupClosable.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'open') {\n                            optgroupEl.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'close') {\n                            optgroupEl.classList.add(this.classes.close);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                        }\n                        optgroupLabel.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (optgroupEl.classList.contains(this.classes.close)) {\n                                optgroupEl.classList.remove(this.classes.close);\n                                optgroupEl.classList.add(this.classes.open);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                            }\n                            else {\n                                optgroupEl.classList.remove(this.classes.open);\n                                optgroupEl.classList.add(this.classes.close);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                            }\n                        });\n                        optgroupActions.appendChild(optgroupClosable);\n                    }\n                    optgroupEl.appendChild(optgroupLabel);\n                    for (const o of d.options) {\n                        optgroupEl.appendChild(this.option(o));\n                    }\n                    this.content.list.appendChild(optgroupEl);\n                }\n                if (d instanceof Option) {\n                    this.content.list.appendChild(this.option(d));\n                }\n            }\n        }\n        option(option) {\n            if (option.placeholder) {\n                const placeholder = document.createElement('div');\n                placeholder.classList.add(this.classes.option);\n                placeholder.classList.add(this.classes.hide);\n                return placeholder;\n            }\n            const optionEl = document.createElement('div');\n            optionEl.dataset.id = option.id;\n            optionEl.id = option.id;\n            optionEl.classList.add(this.classes.option);\n            optionEl.setAttribute('role', 'option');\n            if (option.class) {\n                option.class.split(' ').forEach((dataClass) => {\n                    optionEl.classList.add(dataClass);\n                });\n            }\n            if (option.style) {\n                optionEl.style.cssText = option.style;\n            }\n            if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {\n                optionEl.innerHTML = this.highlightText(option.html !== '' ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n            }\n            else if (option.html !== '') {\n                optionEl.innerHTML = option.html;\n            }\n            else {\n                optionEl.textContent = option.text;\n            }\n            if (this.settings.showOptionTooltips && optionEl.textContent) {\n                optionEl.setAttribute('title', optionEl.textContent);\n            }\n            if (!option.display) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.disabled) {\n                optionEl.classList.add(this.classes.disabled);\n            }\n            if (option.selected && this.settings.hideSelected) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.selected) {\n                optionEl.classList.add(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'true');\n                this.main.main.setAttribute('aria-activedescendant', optionEl.id);\n            }\n            else {\n                optionEl.classList.remove(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'false');\n            }\n            optionEl.addEventListener('click', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const selectedOptions = this.store.getSelected();\n                const element = e.currentTarget;\n                const elementID = String(element.dataset.id);\n                if (option.disabled || (option.selected && !this.settings.allowDeselect)) {\n                    return;\n                }\n                if ((this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||\n                    (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected)) {\n                    return;\n                }\n                let shouldUpdate = false;\n                const before = this.store.getSelectedOptions();\n                let after = [];\n                if (this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = before.filter((o) => o.id !== elementID);\n                    }\n                    else {\n                        after = before.concat(option);\n                    }\n                }\n                if (!this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = [];\n                    }\n                    else {\n                        after = [option];\n                    }\n                }\n                if (!this.callbacks.beforeChange) {\n                    shouldUpdate = true;\n                }\n                if (this.callbacks.beforeChange) {\n                    if (this.callbacks.beforeChange(after, before) === false) {\n                        shouldUpdate = false;\n                    }\n                    else {\n                        shouldUpdate = true;\n                    }\n                }\n                if (shouldUpdate) {\n                    if (!this.store.getOptionByID(elementID)) {\n                        this.callbacks.addOption(option);\n                    }\n                    this.callbacks.setSelected(after.map((o) => o.value), false);\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(after);\n                    }\n                }\n            });\n            return optionEl;\n        }\n        destroy() {\n            this.main.main.remove();\n            this.content.main.remove();\n        }\n        highlightText(str, search, className) {\n            let completedString = str;\n            const regex = new RegExp('(' + search.trim() + ')(?![^<]*>[^<>]*</)', 'i');\n            if (!str.match(regex)) {\n                return str;\n            }\n            const matchStartPosition = str.match(regex).index;\n            const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n            const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n            completedString = completedString.replace(regex, `<mark class=\"${className}\">${originalTextFoundByRegex}</mark>`);\n            return completedString;\n        }\n        moveContentAbove() {\n            const mainHeight = this.main.main.offsetHeight;\n            const contentHeight = this.content.main.offsetHeight;\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.classList.add(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.content.main.classList.add(this.classes.openAbove);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px';\n            this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n            this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n            this.content.main.style.width = containerRect.width + 'px';\n        }\n        moveContentBelow() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.add(this.classes.openBelow);\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.add(this.classes.openBelow);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-1px 0px 0px 0px';\n            if (this.settings.contentPosition !== 'relative') {\n                this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n                this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n                this.content.main.style.width = containerRect.width + 'px';\n            }\n        }\n        ensureElementInView(container, element) {\n            const cTop = container.scrollTop + container.offsetTop;\n            const cBottom = cTop + container.clientHeight;\n            const eTop = element.offsetTop;\n            const eBottom = eTop + element.clientHeight;\n            if (eTop < cTop) {\n                container.scrollTop -= cTop - eTop;\n            }\n            else if (eBottom > cBottom) {\n                container.scrollTop += eBottom - cBottom;\n            }\n        }\n        putContent() {\n            const mainHeight = this.main.main.offsetHeight;\n            const mainRect = this.main.main.getBoundingClientRect();\n            const contentHeight = this.content.main.offsetHeight;\n            const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n            if (spaceBelow <= contentHeight) {\n                if (mainRect.top > contentHeight) {\n                    return 'up';\n                }\n                else {\n                    return 'down';\n                }\n            }\n            return 'down';\n        }\n        updateDeselectAll() {\n            if (!this.store || !this.settings) {\n                return;\n            }\n            const selected = this.store.getSelectedOptions();\n            const hasSelectedItems = selected && selected.length > 0;\n            const isMultiple = this.settings.isMultiple;\n            const allowDeselect = this.settings.allowDeselect;\n            const deselectButton = this.main.deselect.main;\n            const hideClass = this.classes.hide;\n            if (allowDeselect && !(isMultiple && !hasSelectedItems)) {\n                deselectButton.classList.remove(hideClass);\n            }\n            else {\n                deselectButton.classList.add(hideClass);\n            }\n        }\n    }\n\n    class Select {\n        constructor(select) {\n            this.listen = false;\n            this.observer = null;\n            this.select = select;\n            this.select.addEventListener('change', this.valueChange.bind(this), {\n                passive: true,\n            });\n            this.observer = new MutationObserver(this.observeCall.bind(this));\n            this.changeListen(true);\n        }\n        enable() {\n            this.select.disabled = false;\n        }\n        disable() {\n            this.select.disabled = true;\n        }\n        hideUI() {\n            this.select.tabIndex = -1;\n            this.select.style.display = 'none';\n            this.select.setAttribute('aria-hidden', 'true');\n        }\n        showUI() {\n            this.select.removeAttribute('tabindex');\n            this.select.style.display = '';\n            this.select.removeAttribute('aria-hidden');\n        }\n        changeListen(listen) {\n            this.listen = listen;\n            if (listen) {\n                if (this.observer) {\n                    this.observer.observe(this.select, {\n                        subtree: true,\n                        childList: true,\n                        attributes: true,\n                    });\n                }\n            }\n            if (!listen) {\n                if (this.observer) {\n                    this.observer.disconnect();\n                }\n            }\n        }\n        valueChange(ev) {\n            if (this.listen && this.onValueChange) {\n                this.onValueChange(this.getSelectedValues());\n            }\n            return true;\n        }\n        observeCall(mutations) {\n            if (!this.listen) {\n                return;\n            }\n            let classChanged = false;\n            let disabledChanged = false;\n            let optgroupOptionChanged = false;\n            for (const m of mutations) {\n                if (m.target === this.select) {\n                    if (m.attributeName === 'disabled') {\n                        disabledChanged = true;\n                    }\n                    if (m.attributeName === 'class') {\n                        classChanged = true;\n                    }\n                }\n                if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {\n                    optgroupOptionChanged = true;\n                }\n            }\n            if (classChanged && this.onClassChange) {\n                this.onClassChange(this.select.className.split(' '));\n            }\n            if (disabledChanged && this.onDisabledChange) {\n                this.changeListen(false);\n                this.onDisabledChange(this.select.disabled);\n                this.changeListen(true);\n            }\n            if (optgroupOptionChanged && this.onOptionsChange) {\n                this.changeListen(false);\n                this.onOptionsChange(this.getData());\n                this.changeListen(true);\n            }\n        }\n        getData() {\n            let data = [];\n            const nodes = this.select.childNodes;\n            for (const n of nodes) {\n                if (n.nodeName === 'OPTGROUP') {\n                    data.push(this.getDataFromOptgroup(n));\n                }\n                if (n.nodeName === 'OPTION') {\n                    data.push(this.getDataFromOption(n));\n                }\n            }\n            return data;\n        }\n        getDataFromOptgroup(optgroup) {\n            let data = {\n                id: optgroup.id,\n                label: optgroup.label,\n                selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,\n                closable: optgroup.dataset ? optgroup.dataset.closable : 'off',\n                options: [],\n            };\n            const options = optgroup.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTION') {\n                    data.options.push(this.getDataFromOption(o));\n                }\n            }\n            return data;\n        }\n        getDataFromOption(option) {\n            return {\n                id: option.id,\n                value: option.value,\n                text: option.text,\n                html: option.dataset && option.dataset.html ? option.dataset.html : '',\n                selected: option.selected,\n                display: option.style.display === 'none' ? false : true,\n                disabled: option.disabled,\n                mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,\n                placeholder: option.dataset.placeholder === 'true',\n                class: option.className,\n                style: option.style.cssText,\n                data: option.dataset,\n            };\n        }\n        getSelectedValues() {\n            let values = [];\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroupOptions = o.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            if (option.selected) {\n                                values.push(option.value);\n                            }\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    if (option.selected) {\n                        values.push(option.value);\n                    }\n                }\n            }\n            return values;\n        }\n        setSelected(value) {\n            this.changeListen(false);\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroup = o;\n                    const optgroupOptions = optgroup.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            option.selected = value.includes(option.value);\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    option.selected = value.includes(option.value);\n                }\n            }\n            this.changeListen(true);\n        }\n        updateSelect(id, style, classes) {\n            this.changeListen(false);\n            if (id) {\n                this.select.dataset.id = id;\n            }\n            if (style) {\n                this.select.style.cssText = style;\n            }\n            if (classes) {\n                this.select.className = '';\n                classes.forEach((c) => {\n                    if (c.trim() !== '') {\n                        this.select.classList.add(c.trim());\n                    }\n                });\n            }\n            this.changeListen(true);\n        }\n        updateOptions(data) {\n            this.changeListen(false);\n            this.select.innerHTML = '';\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    this.select.appendChild(this.createOptgroup(d));\n                }\n                if (d instanceof Option) {\n                    this.select.appendChild(this.createOption(d));\n                }\n            }\n            this.select.dispatchEvent(new Event('change'));\n            this.changeListen(true);\n        }\n        createOptgroup(optgroup) {\n            const optgroupEl = document.createElement('optgroup');\n            optgroupEl.id = optgroup.id;\n            optgroupEl.label = optgroup.label;\n            if (optgroup.selectAll) {\n                optgroupEl.dataset.selectAll = 'true';\n            }\n            if (optgroup.closable !== 'off') {\n                optgroupEl.dataset.closable = optgroup.closable;\n            }\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    optgroupEl.appendChild(this.createOption(o));\n                }\n            }\n            return optgroupEl;\n        }\n        createOption(info) {\n            const optionEl = document.createElement('option');\n            optionEl.id = info.id;\n            optionEl.value = info.value;\n            optionEl.innerHTML = info.text;\n            if (info.html !== '') {\n                optionEl.setAttribute('data-html', info.html);\n            }\n            if (info.selected) {\n                optionEl.selected = info.selected;\n            }\n            if (info.disabled) {\n                optionEl.disabled = true;\n            }\n            if (info.display === false) {\n                optionEl.style.display = 'none';\n            }\n            if (info.placeholder) {\n                optionEl.setAttribute('data-placeholder', 'true');\n            }\n            if (info.mandatory) {\n                optionEl.setAttribute('data-mandatory', 'true');\n            }\n            if (info.class) {\n                info.class.split(' ').forEach((optionClass) => {\n                    optionEl.classList.add(optionClass);\n                });\n            }\n            if (info.data && typeof info.data === 'object') {\n                Object.keys(info.data).forEach((key) => {\n                    optionEl.setAttribute('data-' + kebabCase(key), info.data[key]);\n                });\n            }\n            return optionEl;\n        }\n        destroy() {\n            this.changeListen(false);\n            this.select.removeEventListener('change', this.valueChange.bind(this));\n            if (this.observer) {\n                this.observer.disconnect();\n                this.observer = null;\n            }\n            delete this.select.dataset.id;\n            this.showUI();\n        }\n    }\n\n    class SlimSelect {\n        constructor(config) {\n            var _a;\n            this.events = {\n                search: undefined,\n                searchFilter: (opt, search) => {\n                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n                },\n                addable: undefined,\n                beforeChange: undefined,\n                afterChange: undefined,\n                beforeOpen: undefined,\n                afterOpen: undefined,\n                beforeClose: undefined,\n                afterClose: undefined,\n            };\n            this.windowResize = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.windowScroll = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.documentClick = (e) => {\n                if (!this.settings.isOpen) {\n                    return;\n                }\n                if (e.target && !hasClassInTree(e.target, this.settings.id)) {\n                    this.close(e.type);\n                }\n            };\n            this.windowVisibilityChange = () => {\n                if (document.hidden) {\n                    this.close();\n                }\n            };\n            this.selectEl = (typeof config.select === 'string' ? document.querySelector(config.select) : config.select);\n            if (!this.selectEl) {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Could not find select element'));\n                }\n                return;\n            }\n            if (this.selectEl.tagName !== 'SELECT') {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Element isnt of type select'));\n                }\n                return;\n            }\n            if (this.selectEl.dataset.ssid) {\n                this.destroy();\n            }\n            this.settings = new Settings(config.settings);\n            const debounceEvents = ['afterChange', 'beforeOpen', 'afterOpen', 'beforeClose', 'afterClose'];\n            for (const key in config.events) {\n                if (!config.events.hasOwnProperty(key)) {\n                    continue;\n                }\n                if (debounceEvents.indexOf(key) !== -1) {\n                    this.events[key] = debounce(config.events[key], 100);\n                }\n                else {\n                    this.events[key] = config.events[key];\n                }\n            }\n            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n            this.settings.isMultiple = this.selectEl.multiple;\n            this.settings.style = this.selectEl.style.cssText;\n            this.settings.class = this.selectEl.className.split(' ');\n            this.select = new Select(this.selectEl);\n            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n            this.select.hideUI();\n            this.select.onValueChange = (values) => {\n                this.setSelected(values);\n            };\n            this.select.onClassChange = (classes) => {\n                this.settings.class = classes;\n                this.render.updateClassStyles();\n            };\n            this.select.onDisabledChange = (disabled) => {\n                if (disabled) {\n                    this.disable();\n                }\n                else {\n                    this.enable();\n                }\n            };\n            this.select.onOptionsChange = (data) => {\n                this.setData(data);\n            };\n            this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', config.data ? config.data : this.select.getData());\n            if (config.data) {\n                this.select.updateOptions(this.store.getData());\n            }\n            const callbacks = {\n                open: this.open.bind(this),\n                close: this.close.bind(this),\n                addable: this.events.addable ? this.events.addable : undefined,\n                setSelected: this.setSelected.bind(this),\n                addOption: this.addOption.bind(this),\n                search: this.search.bind(this),\n                beforeChange: this.events.beforeChange,\n                afterChange: this.events.afterChange,\n            };\n            this.render = new Render(this.settings, this.store, callbacks);\n            this.render.renderValues();\n            this.render.renderOptions(this.store.getData());\n            const selectAriaLabel = this.selectEl.getAttribute('aria-label');\n            const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby');\n            if (selectAriaLabel) {\n                this.render.main.main.setAttribute('aria-label', selectAriaLabel);\n            }\n            else if (selectAriaLabelledBy) {\n                this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy);\n            }\n            if (this.selectEl.parentNode) {\n                this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n            }\n            document.addEventListener('click', this.documentClick);\n            window.addEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.addEventListener('scroll', this.windowScroll, false);\n            }\n            document.addEventListener('visibilitychange', this.windowVisibilityChange);\n            if (this.settings.disabled) {\n                this.disable();\n            }\n            if (this.settings.alwaysOpen) {\n                this.open();\n            }\n            this.selectEl.slim = this;\n        }\n        enable() {\n            this.settings.disabled = false;\n            this.select.enable();\n            this.render.enable();\n        }\n        disable() {\n            this.settings.disabled = true;\n            this.select.disable();\n            this.render.disable();\n        }\n        getData() {\n            return this.store.getData();\n        }\n        setData(data) {\n            const selected = this.store.getSelected();\n            const err = this.store.validateDataArray(data);\n            if (err) {\n                if (this.events.error) {\n                    this.events.error(err);\n                }\n                return;\n            }\n            this.store.setData(data);\n            const dataClean = this.store.getData();\n            this.select.updateOptions(dataClean);\n            this.render.renderValues();\n            this.render.renderOptions(dataClean);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        getSelected() {\n            return this.store.getSelected();\n        }\n        setSelected(value, runAfterChange = true) {\n            const selected = this.store.getSelected();\n            this.store.setSelectedBy('value', Array.isArray(value) ? value : [value]);\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            if (this.render.content.search.input.value !== '') {\n                this.search(this.render.content.search.input.value);\n            }\n            else {\n                this.render.renderOptions(data);\n            }\n            if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        addOption(option) {\n            const selected = this.store.getSelected();\n            if (!this.store.getDataOptions().some((o) => { var _a; return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text); })) {\n                this.store.addOption(option);\n            }\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            this.render.renderOptions(data);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        open() {\n            if (this.settings.disabled || this.settings.isOpen) {\n                return;\n            }\n            if (this.events.beforeOpen) {\n                this.events.beforeOpen();\n            }\n            this.render.open();\n            if (this.settings.showSearch) {\n                this.render.searchFocus();\n            }\n            this.settings.isOpen = true;\n            setTimeout(() => {\n                if (this.events.afterOpen) {\n                    this.events.afterOpen();\n                }\n                if (this.settings.isOpen) {\n                    this.settings.isFullOpen = true;\n                }\n            }, this.settings.timeoutDelay);\n            if (this.settings.contentPosition === 'absolute') {\n                if (this.settings.intervalMove) {\n                    clearInterval(this.settings.intervalMove);\n                }\n                this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n            }\n        }\n        close(eventType = null) {\n            if (!this.settings.isOpen || this.settings.alwaysOpen) {\n                return;\n            }\n            if (this.events.beforeClose) {\n                this.events.beforeClose();\n            }\n            this.render.close();\n            if (this.render.content.search.input.value !== '') {\n                this.search('');\n            }\n            this.render.mainFocus(eventType);\n            this.settings.isOpen = false;\n            this.settings.isFullOpen = false;\n            setTimeout(() => {\n                if (this.events.afterClose) {\n                    this.events.afterClose();\n                }\n            }, this.settings.timeoutDelay);\n            if (this.settings.intervalMove) {\n                clearInterval(this.settings.intervalMove);\n            }\n        }\n        search(value) {\n            if (this.render.content.search.input.value !== value) {\n                this.render.content.search.input.value = value;\n            }\n            if (!this.events.search) {\n                this.render.renderOptions(value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n                return;\n            }\n            this.render.renderSearching();\n            const searchResp = this.events.search(value, this.store.getSelectedOptions());\n            if (searchResp instanceof Promise) {\n                searchResp\n                    .then((data) => {\n                    this.render.renderOptions(this.store.partialToFullData(data));\n                })\n                    .catch((err) => {\n                    this.render.renderError(typeof err === 'string' ? err : err.message);\n                });\n                return;\n            }\n            else if (Array.isArray(searchResp)) {\n                this.render.renderOptions(this.store.partialToFullData(searchResp));\n            }\n            else {\n                this.render.renderError('Search event must return a promise or an array of data');\n            }\n        }\n        destroy() {\n            document.removeEventListener('click', this.documentClick);\n            window.removeEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.removeEventListener('scroll', this.windowScroll, false);\n            }\n            document.removeEventListener('visibilitychange', this.windowVisibilityChange);\n            this.store.setData([]);\n            this.render.destroy();\n            this.select.destroy();\n        }\n    }\n\n    return SlimSelect;\n\n}));\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$ae0c329fb0fb36dc$var$API","$ae0c329fb0fb36dc$export$913382e0b15b5503","keyword","params","URLSearchParams","apikey","fetch","concat","then","r","ok","error","status","json","catch","error1","console","log","$e3055412a69a0bec$export$2996f80ef42b8419","instance","Constructor","TypeError","$89767be5ae191d10$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","factory","generateID","Math","random","toString","substring","Option","option","id","value","undefined","text","html","selected","display","disabled","mandatory","placeholder","class","style","data","$b8f9b7833fa37166$var$catInfo","document","querySelector","$b8f9b7833fa37166$var$select","$b8f9b7833fa37166$var$getBreeds","addEventListener","e","breedId","markupCats","map","param","name","description","reference_image_id","temperament","join","insertAdjacentHTML","$b8f9b7833fa37166$var$updateSelect","markupBreeds"],"version":3,"file":"index.ab0c387a.js.map"}